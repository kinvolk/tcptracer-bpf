// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6f\x6c\x1c\xc7\x75\x9f\xbd\x3f\xe2\x91\xb2\x4c\x5a\xce\xd9\xd4\x25\x4e\xa9\xd8\x75\x58\xd6\x76\x8e\x14\x29\x9d\x29\xdb\x61\xec\x3a\x66\x69\x39\x24\x1c\xd1\x26\x84\x18\xa7\xcb\x89\x12\xa9\xa3\xa5\x13\xef\x24\x72\x75\x06\xa2\xfa\x4f\xab\xb2\x46\x41\xd9\x49\x41\xa8\xaa\xcb\xa3\x68\x9b\x2e\x8c\x80\x69\x8b\x4a\x68\xd3\x9c\x60\x38\x00\x3f\xb4\x00\xd1\x3a\x2d\x5b\xc8\x05\x3f\xd8\x29\x0b\xc4\x08\xdb\x38\x2e\x9b\xaa\xbe\xe2\xe6\xfd\xf6\x76\xf7\xed\xec\xde\x51\x62\x90\x2f\x5c\x40\x1e\xbe\xb7\xf3\xe6\xbd\x99\x79\xf3\xe6\xf7\x66\xe7\xfc\xad\x47\xf7\x7d\xd5\xa7\x69\xc2\x78\x34\xf1\xdf\xc2\xa4\xcc\xa7\xeb\x49\xcb\xdf\xf8\xef\x4e\xa1\x89\xc2\x6d\xc4\x7b\x49\x08\x71\xb3\x10\x22\x57\xb7\x5a\x2c\xd1\x7a\x22\x2d\xf9\xb9\xc8\x9a\xa4\x0b\x33\x54\xaf\xc6\x27\xc4\x6a\xb1\x58\x2c\x5c\x04\xed\x17\x62\xad\x58\x2c\x36\x32\xa5\x97\x02\x66\xbb\xbe\x12\x0d\xfe\x77\x50\xea\xb7\xf7\x31\xbd\xdd\x52\xcf\x25\xb4\x93\x8b\x74\x39\xf4\x76\x2b\xf4\xbc\x24\xfb\x2c\x44\x58\x6c\x95\x6f\xf4\x2d\xc4\xaf\x46\xce\x2f\x84\x38\x52\x23\x44\x93\x10\x62\x0c\x65\x7f\x8d\x4f\xe3\xf2\x5d\x1e\x7a\x0b\x35\x44\x87\x6b\xfe\x97\xfa\x75\x02\xb4\xf6\x3f\x44\xe7\xd1\x2f\x1f\xfa\xd5\x12\xa5\xf1\xcd\xa0\x9e\xff\x6b\xd2\x8e\x7e\xff\xcf\x64\x7b\xfa\x68\x48\xf2\x9f\xd9\xfe\x9f\x34\x8e\xb5\x90\x3b\xbf\x52\xa4\x72\x19\xe5\x12\xca\x45\x94\x0b\x28\xaf\xa0\xbc\x8c\x72\x1e\xe5\x1c\xca\x69\x94\x53\x65\xbb\x7c\xd2\xae\x21\xe2\x47\xd2\x64\xdf\x89\x06\xcc\xc3\x38\xd1\xa3\x8d\xb0\xbf\x99\xea\xb5\x9c\x01\xbf\x09\xfc\x26\xf0\xcf\x12\x3f\xdd\x4c\xfc\xba\x49\xa2\x4f\x46\x89\x3e\x40\x7a\xf5\x6c\x8c\xc6\x67\x9c\xbc\x31\x37\x01\xfb\x7a\xc8\x3e\x7d\xbc\x9b\xde\x8f\xf6\xa1\x7d\xf4\x67\x62\xde\xd6\xcf\xc4\x68\x56\xbe\x4f\xb6\x5c\x85\x3d\xe3\xa0\x69\x9c\x0a\xbf\x41\xe3\x37\x56\x4b\xf3\x9b\x3a\xff\x81\xe4\x8f\xf9\x84\x28\x59\x94\x6a\xf9\x31\xda\x49\x43\x8e\xc6\x75\x78\xf4\x8c\xa4\x53\x2d\x2b\x78\x7f\x48\xd2\x47\x7c\xd4\x4e\x42\x3f\x28\xe9\xde\x57\xa8\xfd\x84\x3e\x44\x65\x66\x84\xea\xf9\xa9\x5e\xef\xab\x98\xbf\x4e\xcc\x53\x0b\xcd\xd3\xa0\x96\x90\xe3\x1e\xd6\x9e\x83\xbf\xbc\x42\x7e\xac\x69\x92\x1f\x14\xdf\xa3\xf9\x87\xdf\xa5\x22\x4f\x4a\xb9\xfa\xdf\x25\xba\x90\x87\x7f\x6a\x42\x3c\x59\x2c\x16\x8d\x79\x2c\x24\x4d\xff\x2c\x2d\xc1\xe1\x3c\xc9\xa5\x22\xd4\x8f\xa0\x78\x0d\xfd\x1c\x28\x52\x79\x8d\xde\xb7\xec\x47\xf9\x09\xec\x1c\xc2\xfb\x35\xf8\x03\xcd\xbf\xd1\x7e\xfd\xad\x4e\x3b\x06\x60\x47\xc0\xa2\x5f\x3f\xd1\x54\x51\xee\x9a\x52\xae\xb9\xa2\xdc\x7e\x4b\xbf\x4d\xb9\x68\x45\xb9\x4f\x94\x72\xe4\x8f\xf5\xb7\x39\xeb\x0f\xa1\x7e\x48\x31\xbe\xfa\x09\xf2\x5f\xfd\x22\x8d\x97\x4a\xdf\x9a\xa2\x7f\x89\x59\x8c\x7f\x0f\xc5\x83\xc4\x45\x9a\x87\x64\x67\x3b\xf9\xdf\x8c\x31\x1f\x31\xa2\xf3\x9f\x60\x1e\x3b\xa9\xfe\xeb\x34\x2f\xc9\x03\x0f\xc8\x32\x1c\x48\xd9\xfc\x6e\x0c\x65\xd8\x4f\x7e\xf9\xb4\x4f\x88\x62\x51\x88\xb0\xef\x30\xd1\x1a\x68\x8d\xfc\xda\x88\x53\xb9\xc8\x10\x8b\xc3\xe3\xb6\xb8\x60\xed\x57\x1a\xfd\x6a\x40\xbf\x1a\x58\xdc\x8c\xb2\x7d\x62\x48\x11\x47\x83\x82\x36\xa6\xb0\xf6\x45\x19\x07\xc3\xda\x83\x72\x7c\x4a\xeb\x20\x28\xdf\xd3\xfa\x37\xec\x49\x46\xf6\xc3\x1e\x1a\xbf\xfa\xaf\xba\xfb\xa1\xf7\x7c\x0d\xb8\xce\xd7\x7e\xc5\x7c\x1d\x11\x18\x57\x94\xa5\x7e\xfc\x57\xb1\x58\x34\xfa\xf1\x4c\x43\x6b\xd9\x4e\x4d\xda\x77\x05\xeb\x2d\xca\xec\xa7\x79\xd6\xf3\x14\x47\x55\xfe\x66\x5d\x0f\xdc\xfe\x44\x1e\x7e\x12\xb9\x8a\xf6\xef\xb2\xb5\x9f\x8a\x90\x9f\xd4\x6f\x71\xb6\xfb\x89\x67\x9c\x30\xfc\xeb\x03\xb4\xbb\x83\xd9\x8d\x38\x90\x6f\x72\xb5\x7b\xcd\xd3\x6e\xf8\x6b\x64\x19\xed\x6f\x63\x76\x1f\xa6\x76\x9f\x72\xb6\x7b\xd8\xd3\xee\xc3\xb0\xfb\xc7\x68\x97\x36\xda\x44\x7e\x3f\xf4\x2d\x39\x70\x44\x35\x7e\x59\x09\xbf\xfc\xca\x70\x53\x23\xc7\x4d\x7d\x6c\xbd\x76\x3b\xf4\xf6\x79\xe1\x17\xf8\x49\x78\xcb\x35\x51\xad\x5c\x69\x9d\xea\x87\x85\xa3\xbe\x17\x3e\x33\x71\xd2\x4f\xa9\x1f\x65\x9c\xf4\x11\xd1\x33\xbc\x1f\x4d\x45\x7b\xbd\x27\x09\x27\x69\xff\x4e\x38\xe9\x04\x70\xd2\xce\x0f\x85\x5d\x0e\xb8\x28\x82\xfd\x36\x02\x5c\x84\xf5\x98\x8b\x00\x47\x44\x80\x23\x22\xc0\x1d\x11\xe0\xa2\xc8\x14\xca\x49\x94\x84\x67\x2e\xf9\x81\x93\x3a\x07\xb0\x3f\x1e\x04\xde\x20\x9c\xa4\x67\x80\x8f\x3a\xd3\xb6\xfd\x53\xcf\xd0\xfe\xa7\x67\x81\x87\x7a\x08\x37\xe5\x3a\x81\xab\x32\x51\xbc\x8f\xe1\x3d\xf4\x76\x02\x47\x65\x10\xaf\xb2\xdd\x78\x0f\x3b\x3b\x81\xa3\x32\xc0\x47\x9d\x73\xb6\x7e\x25\xb2\xc0\x45\x3d\x7f\x07\xbc\x05\x5c\xd4\x43\xe3\x52\x78\x94\xc6\x6b\x2c\x08\x5c\x74\xe0\x3d\xc2\x45\x01\xe0\xa2\x9e\x7f\x42\x3b\xc0\x45\x3d\x34\x8e\xc3\x59\xe0\xa2\x9e\x25\xbc\x07\xde\x09\x00\x17\x9d\xa4\xfd\xa6\x77\x3f\xe6\xa3\x07\x38\x2d\x4b\x78\x29\x71\x12\x38\x0a\x7a\x7b\x61\x47\xee\x80\x31\x2f\x31\x94\xb4\x2f\xf6\xfb\xde\x12\x25\x17\x2d\xbc\x09\x3f\xab\x11\xe2\x72\xb1\x58\xac\xdf\x0d\xff\xb3\xc4\x89\xa8\x65\x3f\x72\xc4\xfd\x3c\xda\xbd\x9d\xfc\x46\xcf\x47\x41\xa3\x1d\x8b\x1f\x37\xb1\x75\x3a\xa0\xdc\xb7\xbe\x4d\xfd\x08\x61\x5f\x40\xd9\x1f\x7a\x95\xf9\x23\xf4\xc0\x9f\x73\x91\x55\x94\x2b\x88\x5b\xbf\x40\xb9\x06\xfe\x32\xe2\x16\xf6\x89\x13\x34\xbf\x1c\xcf\x94\xec\x6a\x70\xe9\x7f\xc8\xb6\xdf\xb9\xcb\x37\x32\xf9\xa6\x75\xc8\x5b\xe5\x56\xd7\xa9\x37\xc4\xe4\x57\x94\xf2\x95\xf1\xdf\x2f\xae\x13\xff\xad\xad\x13\xff\x2d\x57\x85\x27\x96\x5d\xf1\x84\x12\xdf\xbe\x05\xbf\x38\x4f\xf1\x44\x7f\x03\xfe\x71\x94\xe2\x4a\x21\x41\xf2\xbd\xe7\xa8\xd4\xdf\x84\xdf\x9c\x46\x5c\x99\x43\x3e\x38\x41\xf1\x66\x78\x16\x7e\xd4\x33\x0e\xfc\xb8\x06\xfc\x78\x9a\xe1\xcb\xe7\x08\x2f\x6a\x0f\x91\x9d\xbf\x03\x3d\xe5\x38\xbb\x97\xf8\x5f\x21\xda\xc4\x89\x34\x3e\x85\x9d\x9c\xdf\x21\xe9\x5c\x4f\x08\x71\xa9\x01\xf1\xaf\x91\xc5\xf3\x2e\xdb\xfa\xd6\xf3\x7d\xb6\x75\x6e\x1d\xaf\x98\x02\x57\xf6\xd7\xd2\x46\x65\x8c\xcb\x11\x0d\xeb\x0e\x65\xa3\xdc\xf6\x4d\x3c\x76\xc7\x4e\xda\x70\xfa\x6b\x76\xd8\xfa\x59\x49\xee\x99\x9d\x34\x81\x63\x5b\xe8\x7d\xf2\x28\xcd\x8b\xb1\xbe\x93\x13\x77\xc1\x7e\xea\xef\x55\x8d\xec\x4b\x45\x9a\xc1\x6f\x64\xfc\x16\xf0\x1b\xb0\xae\xef\x71\xec\xcf\x3c\xde\x44\x95\xf1\x06\xfd\xb7\xc8\x0d\x54\x21\xb7\x1e\x1c\x13\x92\x78\x22\xc6\xe6\x8d\xe2\xbc\x7e\x84\xe2\xba\x3e\x94\x76\xd8\xb1\xe4\xb5\xef\xe3\xfc\x22\x5c\xfb\x17\x24\x0f\x7f\xee\xd7\xbe\x27\xf7\xf3\xc2\x09\xf5\xbc\x94\xf0\x7f\x8d\xac\xf7\xb6\x6c\x87\xfb\x51\x0a\xfb\x5c\xb5\xe7\x34\x61\xe0\x42\x1d\xef\xc3\x5a\x9d\xd4\x7f\xe3\xed\x4e\x61\x7e\xbe\x83\xf6\x69\x9f\x2e\xbc\x40\xf5\x54\xf1\x60\x5e\x11\x7f\x86\xf3\xa4\xb7\x5f\xfb\xa8\xe8\xb3\xe1\xee\x79\xf8\xcd\x2a\xec\x5b\x46\x79\xad\x68\xb5\x3b\x89\xfd\x44\x3f\xd7\x58\xb5\x7e\x5b\x3c\x3a\xd7\x54\x51\x6e\x55\x29\xd7\x5c\x51\x6e\x59\x15\x6f\xcf\x45\x2b\xca\x5d\x53\xca\x21\x4e\x37\x3a\xeb\x77\x59\xe3\xf4\x0b\xe6\x3c\x91\x9c\x11\xa7\xbb\x5c\xe3\xf4\x8a\x32\x4f\xc7\xf8\xf7\x4c\x21\x8e\xae\x22\x8e\x5e\x40\x9c\xc5\x7c\xb4\x10\x2e\x1b\x46\x7e\x96\x8a\xcc\x50\xfd\xd7\x69\x5e\x92\x07\x66\x29\xee\x06\x28\xdf\x75\xe6\xe9\xbd\x92\x6f\xe6\xe9\x4f\x10\x5d\x8e\xb3\x8f\x93\x9c\xe3\xbc\x92\xd6\x49\x50\x7c\x59\x70\xbf\x9d\xf2\xf4\x5b\x0a\xf0\x97\x80\xcb\x73\xa7\x81\x8f\x4f\x03\x87\x9d\x9e\x77\xc4\x65\xc3\x6f\x24\x6e\xf0\xdb\xc7\xf7\x25\x69\x43\x29\x7e\xd0\xf8\xea\x6f\x51\x1c\x39\x82\x73\x37\xe3\xfc\x2d\x77\xde\x3c\xe7\xd5\xa4\xdf\xd2\x3e\x90\xc8\xff\x25\xfc\x78\x3f\xe8\x29\xd0\x43\xa0\x2f\x80\x1e\x01\x4d\xe3\x5d\xd8\x4e\x76\x5c\xc5\x7e\x91\x6a\xa1\xfd\x70\x0c\xf1\xd7\x8c\xc3\xa3\x90\x9b\x45\x3b\x59\x2a\x4f\x8f\xa3\x7c\x0e\x71\xda\xc8\x13\x80\xef\xf3\x06\x2e\xa5\x7d\xba\x30\x87\xf1\x08\x91\xbf\x19\xfb\x51\xa3\xcf\x3e\xce\x05\x9c\xfb\x15\x5e\xa4\xf2\x52\x90\xce\xdd\x4b\xe3\xb4\x43\xea\xa3\x7e\xf3\x71\xbb\xde\xf6\xaa\x99\x77\xbf\x25\x3f\x36\xe3\xa0\x8f\xe2\x20\xea\x95\xf3\xcc\x1b\x8e\x63\x3f\x2f\xd6\x29\xf7\xff\xa9\xeb\xc3\xc1\xe7\xfa\x94\xf6\xa8\x70\x70\x97\x0a\x4f\x7a\xc8\x73\x1c\x3c\xb5\x0e\xf9\x8a\x38\xd8\x43\x6f\x55\x38\xb8\x8a\xf8\xaa\xc4\xc1\x55\xc4\x57\x25\x0e\xf6\x88\xaf\xcb\x55\xc5\xd7\x75\xe2\xe0\x7c\x97\x2d\x6f\xd5\x5f\x87\x7f\x20\x1f\xec\x0d\xc3\x1f\x11\x77\x73\x9d\xb4\x3e\xf5\x59\xe0\x5f\x23\x2f\x9d\x81\xff\xb4\x2c\x22\x0e\x03\xff\x46\xfe\x81\xd6\xfd\x34\xf0\x6f\x1d\xe5\xb9\xe1\x60\x9e\xda\x6f\xa7\xf6\xc3\x81\x3f\x95\xb4\x19\x7f\xff\x84\xe8\x72\xfc\xfd\x63\x8a\x67\x8e\xf8\xbb\x45\xc6\x5f\xeb\xfa\x9b\xf7\x5c\x7f\xaf\x38\xf0\x85\x5b\x7d\x8a\xd3\x2f\x53\xbc\x2c\xc7\x69\xe4\xf9\xa7\x71\x0e\x70\x7a\xca\x11\xa7\xa7\x7e\xa9\x71\xfa\x82\x2d\x4e\xeb\x58\xef\xfa\x0c\xe2\x24\xe2\xaf\x71\x8e\x6c\xc4\x53\x7d\x06\xe7\x30\xf8\x6e\x54\xfe\xae\x94\x5f\x74\x89\xe3\x74\xfe\xc1\xf1\x79\x01\x7e\x15\xbf\x93\xca\x31\xac\xff\xab\x28\x53\x9d\x13\xe5\xf8\x2f\xf1\x7a\xe4\x65\xc4\xf7\x49\x94\xdf\x86\xde\x39\x16\xe7\xa7\x37\x2c\xce\x0f\x6c\x70\x9c\xb7\xb6\x17\x14\x7f\x4e\xf2\xc0\xed\x1c\xa7\x9b\xe7\x82\xd1\x32\x2d\xd7\x2b\x1d\x7b\x08\x7d\x78\x9d\xf8\xbd\x7c\x6e\x77\x0f\xc9\x03\xaf\xf7\x6b\x2d\xd2\x9f\x73\x47\x29\xef\x29\xe0\xbb\xd4\x25\xe8\xc9\x4d\xd0\x7c\x27\x27\x68\xbd\x19\xf9\xb5\xd1\x3f\x55\x7c\x58\x50\x9e\x03\x18\x71\x65\xc1\x35\xae\xbc\xa7\x88\x2b\xb9\x09\xf2\xeb\xd4\xc4\xb4\x63\xbd\xc5\xd6\x95\x27\xd4\x53\x9e\x32\x84\xf1\x7b\xa3\x99\xe5\x47\xd0\x13\xb9\x51\x3d\x5f\xf7\xde\x87\x3d\xc6\x6d\x5a\xb9\x0f\xc3\x1e\x66\x77\xbf\xb6\xc2\xf2\x8b\xc9\x0a\xf9\x45\xcc\x9e\x5f\x18\xdf\x01\x3d\xec\x99\xf4\xfa\x0e\xe8\x21\xa7\xcc\x2f\x8c\x73\x20\x0f\x39\x65\x7e\x61\x9c\x03\x79\xc8\x29\xf3\x0b\xe3\x1c\x68\x87\xb3\x7e\xcc\xba\xff\xbd\x6a\xce\xa7\xdd\x4f\x63\xeb\xcc\x2f\x30\xfe\x38\xd7\x35\xf3\x8b\x59\x96\x5f\xcc\xb1\xfc\xe2\xcf\x58\x7e\xf1\x36\xf2\x0b\x5a\xb0\xce\xfc\x82\x0e\x02\xcc\xfd\x8d\xfc\xcf\xd8\xdf\xfa\xb5\xf7\xc9\x5e\x8b\xff\x96\xfc\x2a\x28\x16\x37\xc4\x0f\xfb\xb5\x59\x86\x07\x8d\x73\xde\xc9\xeb\xc3\x83\xc6\xf9\x22\xb3\x47\x85\x07\x63\x5e\xe7\x93\x0a\x79\x8e\x07\x27\xd7\x21\x5f\xf5\xb9\xa8\x42\xef\xba\xce\x45\x3d\xf4\x7a\x9e\x8b\x7a\xc8\x79\x9e\x8b\x2a\xd6\xc3\x72\x55\xeb\x61\x9d\x78\x70\x16\x7e\x61\xdc\x03\xb9\x68\x7c\x0f\x99\x03\x8e\x80\x9f\xb4\x00\x77\xe4\x81\x03\xf1\x5d\x67\x78\x1a\x7e\x53\x47\xb8\x63\x18\xdf\xc9\x53\x07\xde\xa1\xf5\xf2\x26\x70\xe0\xe9\x77\x29\x3e\xee\x21\x7b\x7a\x1f\xa3\x32\x5c\x73\x8a\xec\xc4\x77\x81\xde\x2f\x1a\x7c\xba\xb0\xf3\x34\xd0\x48\x58\xd0\x46\xf8\x74\x10\x74\xf0\xb8\xa4\xfb\x03\x41\x59\xf2\xf5\xd7\x28\x97\x9f\xe5\x7c\xf2\x11\x3a\xcf\xeb\xf7\xd1\x01\x5e\xe5\x73\xc9\xd7\xca\xe3\x1b\xb4\x9c\xd3\xf1\xef\x0f\x85\xdf\xa7\xfa\xb9\x89\xae\xf2\x3e\xe5\x97\xeb\xa6\x1b\xe3\x15\x65\xf8\x68\x1f\xdb\xcf\xf0\x7d\xcb\xc0\x7b\x33\x14\x57\x92\xf8\xde\x95\x98\xf9\x3e\xe8\x43\x98\x0f\x1a\xe7\x02\xf0\x98\x89\xc3\x08\xff\x35\x86\xec\xfd\x30\xea\xc5\x91\x3f\x38\xf1\xdb\x51\xb2\x0f\xf7\x6c\x92\x2d\x23\x58\xf7\x69\x94\x59\x07\xde\xed\x53\x9c\x17\xeb\x79\x9c\x1b\xcc\x00\x87\x5e\xc4\xb9\x3a\xf0\xfe\x18\xbe\x57\x15\x68\x59\x38\xbe\xef\x17\x90\x77\x84\xf1\x7d\xbd\x4c\x07\xbe\x40\x34\x7d\xf6\x2b\xfb\x83\x59\xff\xf3\xb6\xf7\xf1\x33\xc2\x2e\x2f\x22\x44\x5b\xbe\x67\xc5\xaa\xc1\x97\xf4\x39\xcf\x91\xf7\x9b\xfb\x78\x77\x51\xe5\x1f\xd7\xdb\xae\x31\x7e\xae\xe3\xb6\xdd\xde\xaf\x64\xa7\xb1\x8f\x11\xbe\xbe\x1a\xc4\x7c\xe2\xbe\x57\xfc\x79\xc8\x63\x9e\x4c\x9c\x7f\x9e\xf9\xe3\x05\x07\x8e\x9a\xf4\xcc\xa7\xfe\xe5\x53\x5e\x7f\xda\xb3\xfe\x3f\x7e\xaa\x1a\x27\xbe\x8e\xd6\xbb\x7e\x8c\x75\x67\xe2\x5f\xac\xa3\x09\x23\x6f\x9a\x86\xff\x62\x1d\x95\xcf\xa1\x0e\x81\x9e\x73\xc9\x83\x86\xca\xfa\xec\xe7\x59\x47\x21\x87\xf5\x89\x73\xb1\x24\xbe\x07\x25\x27\xaa\x5b\x27\x1b\xe5\x87\xc9\x89\x8d\xf5\xbf\xa0\x78\xed\x57\x32\x4f\x46\x1e\xa8\xcf\x20\x3f\x2c\xdf\x8b\x34\xf2\x44\x9e\xef\xda\xef\x47\x19\xf9\xae\x73\x1e\x29\xef\x5d\x7f\x3e\xfb\x3c\xeb\xc7\x8b\x98\xdf\xb3\x28\x5f\xfe\xa5\xcf\xf3\xc0\x06\xcf\xf3\x80\x94\xa5\xfd\xd8\xbc\x17\x6b\xe0\x3c\xcc\xdf\x0e\xfb\x3d\x17\xe3\x9e\x0a\xcf\x67\xc3\xb5\x74\x8e\x6d\x5d\xff\xaa\x7b\x35\xce\x7c\xb6\x53\x96\x66\x3e\x1b\xa3\x7c\xd6\xf0\x27\xb4\x9f\x9a\xc0\xbd\xa8\x89\x8f\x81\x3b\x2b\xe3\xa8\x8f\xd7\x81\xbf\x6a\x70\xaf\xa4\xd2\xfd\xc4\xdc\x04\x70\xfe\x04\xee\x19\x55\x91\x4f\xab\xf1\xa3\x81\xcb\x56\x5c\x71\x99\x2a\x0f\xcb\x4d\x4c\x62\x1c\xfa\xaa\x8e\xcf\xea\x3c\x77\x1b\xfb\xee\x86\x76\x23\x37\xda\xee\x53\xd7\x9d\x3f\xcb\xf5\x12\xc2\xf7\x51\x47\xfe\xd2\x87\xfc\xe5\x3f\x8a\x3e\x9b\xdf\xe3\x5e\x33\xce\x2f\x39\x7e\xe3\xe7\xdd\x49\x9c\x43\x98\xfb\xb5\xf7\x7d\xa4\x04\x70\x6e\xb2\xe5\x5d\xc4\x77\x9c\xa7\x44\xe8\x3e\x8f\xf9\x7d\x7a\x16\xfe\x50\x39\x2f\xbf\xec\x91\x97\xab\xf0\xfd\xf7\xad\xf7\xf9\x18\xbe\x37\xef\x0b\x02\x67\xe7\x69\x7d\x98\xfb\xd3\x3b\x8e\xb8\x34\xa7\xc4\x69\x97\x6d\xf1\xd2\xb8\x5f\x6d\xe0\xbf\xb0\xef\x87\x96\xb8\x49\x4f\x69\x08\xef\xdd\x0e\x3c\xcf\xe2\xad\x99\xdf\xfe\x40\x39\x2f\x14\x6f\x34\x71\xef\xf6\xbf\x26\x39\x4b\x5c\x2c\xf9\x9b\xfe\x46\xb7\x67\x3c\xd3\xe7\x70\x7e\x07\xfc\x5a\x19\x97\x4d\xb3\x78\x49\x7e\x13\x14\xaf\x6c\xb0\x7f\x4e\xcb\xfc\x7a\xe3\xfc\xf3\xfa\xee\xd1\x99\x7e\x7b\x15\xfe\x6a\xe4\xed\x1f\xb8\xf8\x6d\xe5\x3c\x5a\x7d\x2e\x58\x7d\x1e\xbd\xb8\x4e\x79\x7e\x7e\x70\xd9\x43\xde\x58\x37\x35\xb5\xce\x73\x83\x2b\x1e\xf9\xb1\xb9\x7e\x96\x5c\xd6\xcf\xbf\x56\xb9\x7e\xae\xd8\xf0\x48\xbf\x0f\xf7\x44\xd0\x9f\xca\x79\x28\x5d\xd0\xd0\x2f\xd2\x3c\xeb\xb3\x34\xcf\xfd\x01\xba\x58\x5d\xe8\x40\x3b\xb8\xaf\x67\xdc\x17\xa4\x68\x63\xc9\x4f\x83\x5d\xc2\xee\xe7\xc0\x53\x58\x2f\x06\xce\x2a\xf9\x97\xcf\x82\x83\x93\x47\x0f\xd9\xfc\xce\xc0\x51\xc6\xf7\x83\xc4\x0c\xe2\x1f\x70\x56\x62\xe6\x3d\xd0\xcf\x81\xa6\xf1\x33\xf0\xd5\x58\x19\x6f\x3d\xcf\xfc\x11\xb8\x09\xf7\x39\x8d\xef\x02\xaa\x7b\xfe\xf6\xf1\x1d\xaf\x10\x9f\x5a\x5d\xe2\xd3\x7d\x88\x4f\x67\x5c\xe2\x53\x4b\x85\xf8\x74\xb7\x23\x3e\xf5\x55\x11\x9f\xaa\x8f\x4b\x07\x8b\xaa\xf9\xba\xde\x76\x83\x82\xee\x37\xf5\xe2\x7e\x58\x58\xbb\x99\xe8\x47\x40\xfb\x6f\xc2\x78\x2c\xb9\x8c\x47\xa8\xc2\x78\x04\x36\x3c\x5e\x0f\xac\x23\x5e\xaf\x67\x5c\x08\xdf\x52\xfc\x73\xde\x13\x27\x9c\x6b\x9c\x33\x24\xeb\x80\x2b\xcb\xf7\xc6\x57\x1c\x38\xe8\x63\x4f\x1c\x54\x27\xe9\x44\x19\x07\x11\x70\xe5\x78\xd8\x7a\x4f\x6c\x65\x43\xee\xbb\x3b\xef\xb7\x7b\xe2\x6e\x03\xaf\x87\xee\x56\xda\xe7\x96\xaf\x97\xf1\x7e\x8d\xc9\xa7\x79\xa1\x78\xc7\xbf\xc7\x1a\xf7\x58\x4a\xf3\x19\xb0\xe0\x26\x33\xbe\xd8\xcf\x99\x8d\x73\x65\x7e\x6f\xdc\xfc\x9d\x05\xe1\xad\x04\xee\x0f\x1a\xdf\x49\x54\xfb\x8b\x35\x6e\x70\x3b\x0b\xb3\xa8\x1f\xa0\xfd\xc4\xd5\x9f\xf0\xbb\x40\xc7\xba\x65\xf3\x11\xb0\xfc\x13\x01\xb1\xf9\xe0\xd9\x1c\x17\xf5\xa3\x61\x1d\xc9\x65\xb8\x39\x2e\xe5\x67\x73\x5c\xd4\x8f\x86\x38\x26\x71\xde\xe6\xb8\x94\x9f\xd2\xb8\x34\x6f\x8e\x8b\xe3\x31\xd6\xd1\x66\xdc\xb5\x3f\xda\xe6\x7e\xa4\x7c\x0c\x7f\x39\x8b\xbf\x37\x1f\x7a\x1e\xeb\xdb\x27\x3e\xb5\xfc\xae\x98\x3f\xf7\x48\x1f\x0a\x8a\x86\x2d\x76\xfe\x5f\xf9\x89\xbf\xca\xf8\x7b\xc1\x9f\xab\xb1\xf3\x83\xe0\x37\xfb\xed\xfc\x3f\xf0\x11\xbf\x8f\xd5\x3f\x04\x7e\x28\x64\xe7\x3f\x08\x7e\x94\xe9\xfd\x1c\xec\x3c\xc8\xea\x7f\x0c\xbd\x69\xc6\xff\x7b\xf0\xcf\x30\x7b\xf6\xa1\xfd\x69\x56\xff\x0e\xf0\xe7\x19\x7f\x97\x94\xaf\x15\x51\x66\xff\x0b\x3e\xe2\x0f\x31\xfe\x37\xc0\x17\xac\x9d\x0e\xf0\xa3\x8c\xff\x40\x80\xf8\x5d\x8c\xff\x28\xea\x4f\x32\xfb\xbf\x2b\xe9\xad\x62\x91\xf1\xff\xcf\x47\xfc\x85\xa0\x9d\x9f\x03\x7f\x8d\xf1\xf7\x83\x1f\x62\xe3\x7c\x2f\xf8\x8d\x8c\x7f\x27\xf4\x76\xd7\xda\xf9\x1f\xa1\xfe\x38\xe3\xff\x1e\xea\xcf\xd9\xd9\xe2\xdf\x50\x9f\x2f\xd2\x11\xf0\xfb\x18\xff\x2e\x39\x3e\xdb\xc4\x00\x8b\x75\xd7\xfc\xc4\x5f\xad\xb3\xf3\xdf\x07\xbf\x6b\xab\x9d\xff\x9b\xe0\x2f\xb1\xf6\x7f\xee\x23\x7e\x9a\xb5\xff\x19\xe8\x6d\x60\xed\xbc\x86\x76\x16\xd8\xbc\x7f\x88\x76\xd6\x18\xff\x26\xb4\x33\xc9\xec\xfc\x09\xda\x59\xb9\xc9\xce\xff\xa1\x61\x27\xe3\xff\xa1\x8b\xfd\x67\xc0\x4f\x33\xfe\x67\xc0\x3f\xc3\xf8\xff\x0c\x3b\x57\x18\xff\x47\xb2\x7e\xbd\xe8\x63\xf9\xe3\x1b\xe0\x0b\xe6\x3f\x19\x1f\xf1\xcf\xb2\xfe\xfe\x3a\xf8\x8b\x8c\xff\x47\x68\x67\x92\xf9\xc9\x67\xc1\x5f\x64\xfc\xf6\x00\xf1\xaf\x30\x7e\x20\xa0\xb6\x73\x1b\xda\x59\x63\xfd\x5a\x84\x3d\x07\x59\xfd\x1f\xc8\xfa\xb7\x88\xcb\x76\xb6\xf8\x50\xf2\x6f\x75\x8c\x5b\x40\xe6\xe3\x9f\x17\xfc\x79\x42\x9e\xaf\xfe\x9a\x83\xff\x0d\x79\xee\x7b\xbb\x83\xff\xb6\x6c\xa7\xd1\xc1\x7f\x48\xb6\xf3\x39\x07\xff\x51\x89\x9b\x3f\xeb\xe0\x8f\xc8\xfa\xb7\x38\xf8\xef\x4b\xfe\x36\x07\xff\xbb\x92\xbf\xd5\xc1\xff\x91\x6c\xdf\xef\xe0\x3f\x2b\xf9\x35\x0e\xfe\x53\xb2\x9d\x5b\x1d\xfc\x1a\x59\xbf\xde\xc1\xff\x1b\xc9\x0f\x3a\xf8\x5f\x97\xfc\x5a\x07\xbf\x5b\x8e\x5b\xd8\xc1\x9f\x92\xe3\x76\x9b\x83\xdf\x2c\xed\xb9\xc3\xc1\x1f\x95\xed\xec\x70\xf0\xdf\x91\xed\x44\x9c\x7a\x51\x96\xa6\xbd\x53\x08\x11\x63\x74\x9a\xd1\xf3\x16\xfa\xb7\x85\x28\xc7\xd7\x12\xdd\x23\x84\x98\x0c\xd9\xdf\x5b\xdb\xdf\xcb\xda\xdf\xcb\xda\x2f\xd1\xd3\xac\xfd\x71\xbf\x9d\x5e\xa9\xb1\xeb\x6b\xb2\xe8\x7b\x9c\xe9\x2b\xd5\x5f\x64\x74\xb3\x66\xa7\x97\xfd\xf6\xf6\xba\x2d\xfd\x79\xac\x34\xfe\x8c\x5e\x62\xfd\x1d\xa8\xb5\xeb\x3f\xcb\xe8\xe8\x56\x93\x2e\xd9\x76\x86\xd1\x7d\xcc\xbe\x2e\x66\xdf\x1c\xa3\x97\x6a\xed\xf6\x44\xeb\xec\xf4\x6a\x1d\x1b\x9f\xad\x76\x7b\x0e\xde\x64\xaf\x3f\xcf\xe8\xee\x9b\xed\xf6\x4d\x31\x7a\x80\xd9\xbb\xc0\xec\x6b\xf2\xd9\xe9\xe9\x80\xbd\xfd\x2e\x66\xff\x14\xa3\xfb\xea\xec\xfa\xe6\x19\x6d\x9d\xdf\x07\x4a\xf2\x16\xfa\x41\xe4\x94\x56\xfa\x20\xa3\x07\x34\xbb\x3e\x71\x5f\x76\x70\x3c\x2b\x52\xa3\x83\xd9\xf4\xe8\xf1\x6f\x0e\xc6\xe3\xc3\xc7\x06\xb3\xf1\x64\x26\x15\x4f\x24\x93\x83\xe9\xac\xb8\x6f\x74\x70\xa4\xfc\xfa\x4b\xfc\xed\xb3\x89\x74\xe6\x4b\x87\x0f\x0d\x1f\xcb\x64\x13\x23\x23\xf1\xd1\x41\x5b\x5b\xd9\x64\x3a\x7e\x6a\x77\x3c\x79\xfc\xd8\xb1\xc1\x64\x56\xa4\xd4\x6c\xbb\x06\xd5\x4b\xe5\x1b\xae\xa7\x5d\xad\xa7\xdd\x4b\x4f\xbb\xab\x1e\xf3\x8d\xec\x62\x36\x99\xce\x8e\x26\x92\x83\xa3\xf1\x4c\x36\x91\x3d\x99\xe1\x1d\x4f\x0f\x1f\xca\x88\xf8\xa9\xc1\xd1\xcc\xf0\xf1\x63\x56\xd3\x0e\x1f\x8a\xa3\x4e\xd9\x2c\x0b\xcb\x6e\x12\x7f\xe1\xe0\x5a\x3b\x96\x19\xcc\x4a\x5b\x06\xb9\xe9\xe6\x0b\x6b\xf5\xe4\xc8\xf1\x8c\xa3\x2a\x31\xe3\x23\xc3\xc9\xc1\x63\xa5\xb7\x99\xec\x68\x36\xf1\x4d\x71\x5f\x46\x7f\xb6\x54\xee\x7b\xf8\xe1\xd6\x78\xdb\xfd\xa5\x72\x77\xbc\x55\x96\xed\x28\x77\xa1\x6c\x2d\xd3\x31\x54\x8f\xa1\x5a\x0c\xd5\xc0\x6f\x05\x7f\x0f\x5a\xdb\x83\x6a\x7b\x50\x6d\x0f\xaa\xed\x29\x8f\x77\x7c\xf0\xd4\xe0\xb1\x6c\x7c\x38\x7d\x6a\x37\xf1\x30\x21\x99\xe3\xc9\x94\x85\x9b\x3d\x99\x1e\x19\x4c\x0f\x1f\x22\x96\x6c\x5c\x16\x1d\x54\xb4\x1b\x54\x1b\xc8\x36\xd0\xad\xa0\xa9\x6c\x45\xb9\x3b\xde\x41\xaf\x3b\x88\x6a\xeb\x80\x14\xd8\xad\x1d\xb0\xb7\x03\x52\x1d\x0a\x7b\xdb\x95\xf6\xb6\x3b\xed\x6d\xa7\x46\xdb\x49\x07\xa8\x5d\xed\x50\x0d\xba\x0d\x74\x2b\xaa\x51\xd9\x8a\x72\x4f\x7c\x17\xc4\x76\x61\x02\x76\xa1\x3a\xf8\x54\xc6\xe2\x6d\xa8\xd6\x86\x6a\xa0\x5b\xdb\xa8\xfa\xae\x56\xbc\x47\xd9\xd6\x8a\x7a\xa0\x5b\x41\x53\xb9\x3b\xbe\x2b\x4a\x03\xd1\x86\x8b\xaf\x37\xf8\x6c\xf3\x09\x05\x1a\x11\x62\x8d\x7e\xbe\x2c\x7e\x8b\xe1\x74\x9e\xeb\x6b\xf8\xc7\xd2\x17\xfc\x3f\x2a\x9d\x0f\x3f\x42\xd9\xa6\x79\xcb\x8f\x33\x3e\x4b\xdb\x44\xad\x26\x14\xa8\x46\x88\xb5\x1e\x2a\x71\x8d\x57\x7e\x5b\xf2\x5b\xe4\x0d\xfe\xaa\x8b\xfd\x06\x4e\xbd\x12\xf2\xd6\xff\x13\xa1\xd6\x1f\xa2\x9f\x7b\x97\xf7\xd9\x26\x7c\x4f\xe2\xfa\x5f\x77\xd1\x6f\xe4\x77\x95\xfa\x9f\x77\xd1\x3f\xf0\xb8\x5d\x4f\x13\x30\x23\xd7\x7f\xd6\x45\xff\x2a\x1a\xed\xab\xd0\xff\x17\x5d\xf4\x0f\x41\xff\x41\x8b\xfe\x5a\x85\xfe\x05\xb7\xf9\xc7\xf7\xe5\xcb\x5b\xbd\xf5\xbf\xeb\x32\xff\x0b\xd0\x3f\x6f\xd1\xbf\x55\xa1\xff\x67\x2e\xfa\xd7\x00\x71\x17\x6e\xf6\xd6\xff\x53\x17\xfd\xe3\xfb\x9c\xfa\xb7\x29\xf4\xdf\xed\x32\xfe\x57\xe8\xe7\x7a\x62\xb9\xce\x5b\xff\x17\x5c\xc6\xbf\x19\xeb\xf7\x8c\x45\x7f\xbd\x42\xff\x05\x97\xfe\x4f\xe3\x77\x15\x0b\xc2\x5b\xff\x94\x4b\xff\xe7\x9e\x30\xf5\x1a\xe5\x2d\x0a\xfd\x2f\xb8\xe8\x1f\x02\x60\x9f\xd4\xbc\xf5\x7f\xcb\x6d\xfe\xa1\x3f\x6a\xd1\x7f\xab\x42\xff\x23\x7e\xd2\xcf\x63\xe0\xda\xfd\x54\xf2\xef\xda\x3c\x7e\xbd\xea\x53\xcb\x37\xec\xad\x4e\xfe\x69\x17\xfd\xcd\x0f\x54\x27\xff\xa6\x8b\xfe\xae\x07\xab\x93\x7f\xd6\x45\xff\xc0\x43\xd5\xc9\xff\xad\x8b\xfe\xf4\x97\xab\x93\xef\x12\x6a\xf9\xb3\x5d\xd5\xc9\xdf\xaf\xa9\xe5\xa7\xbf\x52\x9d\xfc\x9d\x2e\xf2\x97\x1f\xae\x4e\x3e\xe8\xd2\xff\xc5\x47\xd4\xf5\xf9\xfe\xf9\x35\x17\xfd\xef\xb9\xc8\x73\x3a\x8c\xfb\x84\xfc\x59\x82\x7c\x93\x25\x6f\x8d\x59\xfc\xdf\x38\x11\xf9\xff\x00\x00\x00\xff\xff\xbd\xd5\xe2\x33\x80\x5a\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 23168, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

