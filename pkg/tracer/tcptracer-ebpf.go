// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\x7f\x6c\x5c\xd9\x55\x7e\x6f\xec\xc9\x8c\x9d\x4d\x1d\x92\xce\x66\x32\xa5\x62\x4a\xa1\x31\x53\xb6\x6b\x3b\x4e\xd6\x6b\xb5\x74\xb4\x25\x5d\x63\xad\x64\x2b\x8a\x89\x89\xba\x8c\xa7\xd3\x49\xec\x4c\x9a\x4c\xc6\x93\xd8\x6f\xa7\xd0\x08\xd8\x36\xb2\x96\xe2\x2c\x0b\x98\x55\x04\x9e\xd8\x21\x06\x52\xad\x11\x3f\xe2\x3f\x40\x63\x55\x5b\x61\xa1\x15\x58\x28\x42\x46\x18\x64\xa1\xa8\x72\xab\xaa\x32\x74\x15\xcc\xb2\xc2\xcc\xbb\xe7\x7b\xf3\xde\x3d\xef\xbe\x37\xe3\x24\x5d\x46\x72\x4f\xcf\xb9\xf7\x9e\x73\xee\xbd\xe7\x9e\xfb\xdd\xfb\x6e\xf6\xab\x27\x5e\xfa\x7c\x40\xd7\x35\xeb\xa7\xe3\x8f\xff\x56\x5e\xb0\xff\x7f\x12\xff\xfb\x91\x6a\xcd\xca\xd3\x24\x7b\xb5\xfa\xf7\xa1\xea\x5f\xa9\x75\x6b\xc7\xe4\x8d\x74\x5e\xc8\x4b\xb1\x6d\xc1\x57\x6e\x51\xbd\x50\x40\xd3\xb6\x76\x76\x76\x2a\x73\xe0\x9b\x34\x6d\xbb\xca\x47\x99\xd1\x7b\xcd\xb6\xde\x80\xc9\x43\xfe\x3b\xa0\xc6\xa1\x41\x66\xb7\x4f\xd8\xb9\x07\x3d\xa5\x58\xd2\x65\xb7\x4f\x61\xe7\x55\xf4\x37\xa2\x1d\x12\x25\xc6\x1e\x92\x37\xd2\xae\xea\xba\x76\x2e\xa4\x69\xf1\x2a\x9d\x00\x1d\x0a\x7d\x48\xe7\xed\x93\x3e\x76\x2b\x21\xe2\x23\xa1\x10\xd9\xbf\x0c\x5e\x0f\x12\x7f\x8b\xf7\xab\x83\xc6\x77\x1c\xf5\x9a\x86\x85\x1f\x43\x4d\x3b\x42\x9f\x71\x39\x4c\xfe\x1f\xa4\xf2\xb7\x3e\x4e\x34\x5a\xf5\xa3\xea\xc6\x8e\x65\xff\x99\x8f\xff\xb7\xa0\xf7\x5a\xa0\xf7\xcd\xcd\x1d\xa2\x1b\xa0\x6b\xa0\xab\xa0\x2b\xa0\xcb\xa0\x4b\xa0\x8b\xa0\x0b\xa0\xb3\xa0\x33\xa0\xd3\xa0\xd7\x41\xaf\x81\x4e\x82\xe6\x41\x47\xa9\x9f\x01\x9a\xef\x52\x82\xf8\x52\x8c\xca\x8d\xcb\xfb\xd1\x7f\x6a\x67\x14\xa2\xc4\x27\xda\xa9\x5e\xe2\x1a\xe4\x71\xc8\xe3\x90\x93\x5d\x23\xdf\x4e\xf2\x56\xf2\xc7\xb8\xd2\x41\xfc\x19\xf2\xd3\x28\xf6\x08\xde\x98\x4c\x92\x7c\x0a\xfd\xe9\xa7\xfe\x18\x93\x7d\x54\x5e\x18\x84\x7e\xf4\x7f\x6a\x51\x1a\x97\x74\xa1\x28\xca\x33\x89\x75\xf8\x33\x09\x9e\xc6\xb5\xf2\x33\x34\xde\x13\x2d\x14\x2f\xb9\x37\x1f\x08\xf9\x44\xb5\xd3\xa6\x47\xb9\xc4\x77\xa0\x27\x8f\x76\x34\x0f\x63\x85\x6b\x82\xcf\x25\x36\x51\xfe\x25\xc1\x9f\x0b\x90\x9e\xb4\x31\x22\xf8\x81\xd7\x49\x7f\xda\x18\x25\x3a\x7e\x81\xea\x35\x51\xbd\x81\xdf\xa6\xf2\x52\x2f\xe6\x35\x41\xf3\x9a\xd5\x33\x62\xdc\x23\xfa\xaf\x8a\xf2\x88\xfe\x06\xad\x8b\x6a\x6e\x30\xe5\x41\xed\xcf\x85\xdc\x8a\xc3\x5c\xec\xa4\x68\xd7\xf6\x35\xe2\x2b\x65\xa2\x66\x14\x9f\xac\xc6\x99\x35\x8f\x95\x0c\xc9\xcd\x78\x37\x97\xf4\x58\x99\xda\xe5\x62\xd4\x8f\xa0\x36\x4b\xfd\x8c\xf5\x60\xbe\x29\xbe\x33\xb1\x61\xd0\xf7\x51\xff\x14\xe8\x43\xd4\x1b\x45\xf9\x36\xe2\x83\xe2\xc1\xb2\xd7\x76\xd0\xed\xd7\x30\xfc\x6a\x76\xf8\x63\x5c\x8e\xd7\x6d\xf7\xbe\xb2\x5d\x7b\xdd\x76\xa7\x1c\xe3\x60\xb7\xeb\xa8\xdb\xee\xa1\xb2\x1d\xc5\x67\xdb\xd3\xee\xfa\xa3\xa8\x1f\x56\x8c\xb7\x71\x39\x29\x78\x63\x8e\xc6\x4b\x65\x6f\x5b\xd1\xbf\xf4\x3c\xc6\xbf\x9f\xe6\x23\x3d\x47\xf3\x90\xe9\xed\xa6\x78\xbc\x85\xf9\x48\xd0\xbc\x8d\x95\x1f\x62\x7e\x7a\xa9\xfe\x6d\x9a\x97\xcc\x99\x4f\x0b\x1a\x69\xce\x09\x7b\x56\x1c\x4e\x80\x46\x9a\x28\x4e\x4f\x8b\xfc\x54\xe5\x03\x67\x89\xd7\xc1\xeb\x14\xe7\x46\xb9\x4f\x9a\x77\x3b\x1f\x4e\x4a\x79\xc2\xd9\xaf\x3c\xfa\xb5\x1f\xfd\x32\xa9\x33\x2f\x77\xb0\x7d\x68\x54\x91\xa7\x83\xda\x49\x41\x23\xfa\x11\x91\x67\x23\xfa\x67\xc4\xf8\x98\xeb\x22\x28\xca\x29\x1f\x58\xfe\x64\x10\xa7\x25\xc4\x6f\xdb\xe7\xdd\xe3\x3d\xdc\xd0\x7c\x0d\x7b\xce\xd7\x29\xc5\x7c\x9d\xd3\x30\xae\xa0\x66\x3f\xfe\xd3\x91\xef\x5f\xde\xdf\x59\xf3\x53\x17\xfe\x2d\x63\xfd\x75\x30\xff\x69\x9e\x8d\x32\xe5\x55\x55\xbc\x39\xd7\x03\xf7\x3f\x5d\x46\x9c\xc4\xd6\xa1\xff\xa7\x24\xfd\xd6\xfa\x6d\xdb\xe3\xd6\xfb\xd0\x37\x6f\x58\xf1\xf5\x00\x7a\x0f\x33\xbf\x91\x07\xca\x71\x4f\xbf\xb7\x7d\xfd\x46\xbc\xc6\x36\xa0\x7f\x1f\xf3\xfb\x2c\xe9\xfd\x45\xb7\xde\xb3\xbe\x7e\x9f\x85\xdf\xdf\x81\xde\x80\x28\x4f\x97\x4f\xc1\xde\x9a\x0b\xa7\x34\x12\x97\xf5\xf0\xd1\xff\x1b\x2e\x8b\x3e\x59\x5c\x56\x41\x9c\x44\xf6\x10\x5e\x69\x14\x97\x19\x67\x35\x57\xfd\xc6\x70\xd8\xf7\xa9\x1f\x35\x1c\xf6\x3d\xe2\x91\x7f\xee\x05\xd0\x8f\x04\xc6\xb3\x80\x7a\x81\x2f\x10\x0e\x0b\x3c\x20\x1c\x56\x00\x0e\x03\xfe\x7a\x0b\xeb\x38\xaa\x33\x1c\x76\xf0\xdf\x34\x79\x7c\xb0\x2f\xc7\x80\xb7\xb0\x4e\x4b\x31\xe0\x8d\x18\xf0\x46\x0c\xf8\x24\x06\xbc\x15\x03\xde\x8a\x01\x6f\xc5\x80\xb7\x62\xc0\x5b\x2c\x4f\x5a\x79\xb4\x14\x1b\x91\xf2\x55\x29\x36\x48\xfd\x6c\x02\x0e\xeb\x1d\x04\x4e\x18\x46\x7f\x09\x87\x19\xe3\xc0\x5f\xbd\xd0\x93\x18\x01\x2e\x8d\x53\x79\x11\x78\xab\x1f\x76\x7b\x81\xe3\xc6\x3b\x50\xde\x83\x72\xf8\xd9\x0b\xfc\x36\x9e\x44\x79\x1f\xca\xd1\xaf\x5e\xe0\xb6\x71\xe0\xaf\xde\x59\x69\x1c\xd2\x45\xe0\xae\xfe\xb7\x81\xe7\x80\xbb\xfa\x69\x1c\x2b\x27\x68\x7c\x27\x82\xc0\x5d\x67\xde\x21\xdc\xd5\x0c\xdc\xd5\xff\xf7\xd0\x03\xdc\xd5\x4f\xe3\x3e\x56\xbc\x26\xf8\x5c\xff\x2a\xca\x81\xa7\x9a\x81\xbb\xae\xd0\xfe\x35\x70\x4a\x83\xbf\x4b\xa8\x37\x22\xf8\xf4\x15\xe0\x34\xd8\x1d\x80\x1f\xa5\x33\xd6\x3c\x02\xbf\xc6\x28\x6f\x0d\x05\x6e\x6a\x66\xc8\x57\xee\x50\xbd\x50\x35\x2e\x17\xab\xf1\xd2\x76\x9c\x78\x67\xde\x89\x3b\xf6\x37\xd7\x3e\x82\xfc\x5d\x3a\x44\x71\x68\xe5\xc5\xd2\x21\xe8\xf1\x59\xf7\x83\xca\x7d\xf0\xeb\xd4\x8f\x30\xf6\x19\xd0\xa1\x30\x01\x40\x3b\x7e\x1b\x8b\x2f\xab\xbf\xa5\xd8\x16\x28\xce\x1f\xc8\xbf\xb9\xd8\x7b\xa0\xdb\x90\xaf\x49\x78\xd0\xb8\x4c\x71\xc0\x71\x94\xe9\xff\x7e\x8f\x71\x0a\x3b\xc7\xc7\xa7\x7d\x94\xb5\xdf\xda\x45\x7b\x67\xbb\xcd\x5d\xda\x0d\xb3\xf6\x1b\xca\xf6\xf5\x71\xe7\x7b\x8f\x88\x3b\xb7\x77\x89\x3b\xd7\x1a\xc2\x31\x6b\x9e\x38\x46\x89\xab\xff\x18\x71\xf1\x26\xc5\x89\xb1\x80\xf8\x98\x42\xfe\xb9\x83\x38\x79\x05\xf9\xe6\x8f\x70\x5e\x3d\x3f\x0a\x5c\x8a\xb8\x49\xe4\x81\x4b\xb7\x11\x47\x05\x86\x63\x8b\x94\x17\x7e\x9d\xfc\xb1\xce\x45\x91\xa6\x9f\x95\xc6\x69\xa0\x76\xce\xa6\x83\x9b\x8d\x53\x8f\x10\x5f\xc3\xa9\x3f\x2d\x78\x7e\x4e\xe7\xeb\xdb\xc6\xb1\x71\x17\x5e\x6d\x57\xe0\xd5\xa1\x96\xa0\x28\xe7\xeb\x8e\xd6\xa7\xbd\x8f\x7c\x34\x4a\x1b\xe5\x50\xe8\x29\xaa\xbf\x07\xf5\xf7\xa8\xeb\xbf\xfc\x34\x6d\x78\xce\x3c\x30\xc8\xf2\x40\x5c\x99\x07\xf6\x3c\x52\xbb\xdd\xe2\x15\x93\x9a\x71\x55\x6a\x4d\x32\xfc\x40\xf1\x64\x9c\xa3\xbc\x6b\x8c\xe6\x5d\xfe\xac\xf9\xed\xf3\xb8\xef\x88\xb4\xfc\x12\xdd\xaf\xdc\x20\x7e\x48\x3f\xad\x9b\xfb\x77\x05\xfb\xfe\x39\x1d\xe3\x07\x6a\xe2\xfd\x90\xa8\x77\x52\xdc\x96\xd9\xfe\xf4\x21\xbe\x16\x77\x85\x6b\x22\xc0\x81\x06\xca\x23\xfa\x3e\x81\x1f\x1e\x5f\x6f\x93\xe0\x83\x90\xdb\xfa\x7f\x53\x94\x04\xb5\x5e\xea\xb7\x4e\xfb\xab\x15\xff\xaa\xf5\xb9\xa8\xc8\x07\x63\x65\xf2\x67\x48\xff\xde\x4e\x40\x73\xe2\x6f\x19\x87\x64\xe0\x77\x06\xf9\x3d\x57\xcb\xeb\xef\xef\x38\xfb\x97\x41\xde\x37\x6e\x44\x1b\xf6\x47\xca\x17\x37\xe2\x75\xdb\x6d\x29\xdb\xb5\xd7\x6d\xb7\xa1\xca\x87\x37\x3a\xea\xb6\x7b\x5f\xd9\x0e\x79\x34\xea\xae\xdf\xe7\xcc\xa3\xd0\x6b\xb7\x4b\x0a\xde\x98\xeb\xf3\xcc\xa3\x9b\xca\xf3\x3b\xc6\x1f\xf8\x29\x3d\xb7\x85\xbc\x77\x13\x79\x12\xf3\x91\x98\x45\x9e\xb4\xee\x59\x6e\x51\xfd\xdb\x34\x2f\x99\x33\xf3\x82\x46\x9a\x7f\x28\xec\xb9\xcf\xef\x5b\x42\x6e\xe7\xc5\x1f\x10\x5f\xcb\x8b\x84\xa7\xdd\xf7\xa4\x41\xb1\x9e\x9c\x71\x3d\xe3\x83\xe7\x1b\xa9\x47\xf1\xcf\xf1\xb4\x1a\x3f\xab\xe2\x4a\xec\xfb\x4d\xf2\xf8\x9b\xd4\x5c\x4b\xd6\x39\xc6\x98\xa3\x7c\xc4\xc7\xc1\xc2\xc9\xd6\xf9\xda\xba\xbf\x4a\x97\xff\x02\x71\xfe\x05\xf0\xd6\xfa\xc8\x83\xbf\x09\xbe\x08\x9e\xe6\xa3\x72\x80\xfc\x58\xc7\x7e\x90\x4b\x10\x8e\x36\xf3\x91\xc9\xaf\x83\xe6\x62\xaf\xa0\xdd\x3c\xf4\x7c\x05\xfb\xcc\xb2\x84\xc3\x8c\xf2\x92\x84\xc7\x2a\xf3\xe8\x7f\x33\xc5\x5f\x25\x4d\x7c\x34\x20\x8f\xeb\xbd\x6a\xe7\x7b\x30\x0e\x87\x1b\x98\x87\xa0\xf6\x4d\x41\x1f\x3f\xbf\xdc\xd6\x5a\xb5\x47\x39\x17\xf5\xb1\xf3\x90\x8c\x2f\xdd\xb8\x72\x43\xc6\x95\x37\x06\x95\x7e\xab\x70\x65\x9f\x0a\x9f\xf9\xb4\xe7\xb8\x72\x66\x17\xed\xeb\xe2\x51\x1f\xbb\x1c\x57\x2a\x71\x69\x03\xf9\x50\x89\x2b\x1b\xc8\x87\x4a\x5c\xe9\x93\x0f\x37\x1a\xca\x87\x1b\xbb\xc3\x95\x35\xdc\x45\x71\x62\xdc\x46\x7c\x9c\xa1\xf8\x19\x88\x68\xd0\x8b\x78\xe9\xa5\xf8\x32\xe6\x81\x37\x71\x8e\xb4\xf1\xe5\x2a\xc3\x97\xff\x48\xeb\x70\x16\xf8\xb2\xf5\x3e\xe5\xcd\xe0\x4b\x42\xef\x40\x37\xe9\x8f\x34\xf7\x0b\x6a\xe7\x4b\x5a\x27\x76\xbe\xa4\x0b\xc3\x46\xf2\xe5\x62\x83\xf9\xd2\xab\x1e\xe5\x4b\x9a\x07\x7b\x9d\xa9\xef\x15\x54\x71\xfb\xa3\xc9\x97\x37\xa5\x7c\x69\x20\x1f\x18\xb7\xb0\xce\x13\xf2\x3d\x86\x95\xe7\x8c\x5b\xc8\x0b\x09\xf9\xde\xc3\x28\xaf\x7a\xe4\x53\xba\x4f\xa0\x7c\x67\xe3\xe2\xca\x87\x89\xa6\xe8\xda\x52\xdc\x0f\x88\x7c\x0b\x9a\xeb\x7f\xbd\x96\x87\xe3\xc2\xcf\x37\x60\x67\x81\xe5\xdb\xd9\x47\xce\xb7\x83\x9a\x3a\xdf\xfa\xcd\xb7\x17\x9e\xe6\xb8\xd9\xbe\x97\xeb\xa9\xf1\x62\x9d\xd1\x35\x81\x66\x8c\xed\x12\x4f\xd7\xee\xcd\x8a\x84\x2b\x81\x9f\x87\xf4\x82\xc0\xd3\xa5\xf3\x74\x0e\xaa\xe0\x3b\xd1\x3d\xd8\x29\x4d\xd1\x7c\x65\xa6\x68\x9d\x58\xe7\xcc\x0a\xce\x61\xaa\x75\xbd\xa2\x3c\x0f\x27\xc9\xef\xb9\x15\xcf\x7c\x70\x5f\x91\x0f\x4a\x53\x14\x97\xb9\xa9\x59\x17\xbe\xf6\xbb\x27\xac\x8f\xdb\xa1\x37\xb6\x5b\xbd\x5e\xb8\xfd\x24\x70\x7b\x9f\x8c\xdb\x7d\xc6\x69\x56\xb9\xaf\xce\x7a\xe0\x76\x79\xbd\x67\x70\x7f\xe8\x8d\xdb\x93\x32\x6e\xb7\xbe\xbb\xf9\xf8\x33\xed\xf7\xdd\xcd\xa7\x9d\x12\xb7\x5b\xf7\x1f\x3e\xed\x94\xb8\xdd\xba\xff\xf0\x69\xa7\xc4\xed\xd6\xfd\xc7\x61\x77\xfd\xa4\x73\x9f\x82\x5e\x77\x5c\x26\x77\x89\xdb\x31\xfe\xf8\xee\x6c\xe3\xf6\x79\x86\xdb\x17\x18\x6e\xff\x13\x86\xdb\xef\x02\xb7\xd3\x02\x75\xe3\x76\x3a\x90\xdb\xfb\x10\xc5\xb5\xb5\x0f\x0d\xe9\xf7\xc9\x5f\x47\xfc\x9a\x71\x15\xd4\xfe\x96\xfa\xf5\xd8\x71\xf8\x03\x86\xef\x1a\xbd\xe7\x4e\x82\x4e\x3f\x1a\xbe\xb3\xee\xdf\x98\xdf\x2a\x7c\x97\xf4\xbb\xbf\x53\xb4\xe7\xf8\x6e\x7a\x17\xed\x1b\xbe\x6f\x54\xd8\x6d\x08\xdf\x35\xb0\x6e\x7c\xef\x0d\x7d\xda\xf9\xde\x1b\x2a\xd6\xcd\x46\x43\xeb\x66\x97\xf8\x6e\x1e\x71\x61\xbd\xd7\x98\x43\x7c\xf4\x2e\x00\x1f\x20\x4e\x12\xc0\x13\xe5\x4d\x29\xde\xc6\x66\x11\x37\xad\xb8\xf7\xc7\xf7\xeb\xdc\x99\x6f\xd1\xba\xba\x03\x5c\xf7\x0a\x7d\x5f\xa8\x3c\x47\xfe\x0c\xbc\x48\x34\x12\xa2\xfb\xa8\x0a\xee\xd7\x07\x8e\x58\xf2\xac\xa0\xa7\x35\xac\x33\x8d\x2e\x16\x4f\x07\xc1\x07\x09\x08\x58\x79\x7f\xa8\x19\xf7\x7d\x6c\xbd\x46\xc5\x72\x75\xdc\xf7\x7d\x0e\xf7\x7d\x01\xdc\xcb\xb3\xfb\x2a\x8e\x6b\x5e\xfe\xd8\xaf\xd5\xc6\x99\xf0\x19\x70\x19\xbb\x27\x2c\x9d\xb7\xbf\xd7\x99\xfb\x4e\x06\xf7\xf5\x46\xb9\x87\xe1\x9e\x53\xb5\x7a\x34\x8e\xf2\x3d\x7f\xba\x7c\x17\xeb\x6e\x14\xfc\x5f\x83\xbf\x20\xe1\x36\x37\x2e\x23\x5c\x17\x0d\xc9\xfe\x5b\xf5\x52\xf8\xde\x36\x81\xfa\x76\xbb\x02\xf3\xaf\xe8\xc2\xad\xc3\x8a\xfb\x55\xa3\x8c\x73\xf8\x2d\xe0\x49\xbc\x93\xa8\x00\xaf\x4f\xe0\x3b\x4f\x85\x96\x81\xeb\x3b\x7b\x05\xe7\x86\x88\x86\x7d\xd0\xe2\x9b\x09\x80\x55\xe8\x73\x59\x6d\xfe\xed\xfa\x07\xa4\xf2\x54\x5e\x93\xdb\x0b\x94\x26\xe3\x46\x33\x1f\x19\xe5\x0e\x07\x6e\xb5\x7f\xd6\x7d\x35\x3f\xaf\x5b\xfd\xf3\xec\xd7\x01\xd9\x6e\xa6\xd7\xda\x7f\x08\xd7\xae\x07\x31\xbe\x78\x27\xe5\x3d\xfe\x6f\xb2\xf1\xbf\xe9\xc2\x3f\xd3\x3e\xf8\x35\xa8\xe1\xde\x9d\xed\x37\xde\xf5\x3f\x51\xe3\x3f\x98\x78\x9e\x65\xf1\x3c\x2f\xc5\x73\x1a\xf8\xdf\x2b\x9e\xdd\xf7\x36\x05\xb6\x4e\x1a\x8b\xd7\xc7\x8d\x07\x7e\x4e\xf8\xa0\xc6\xcf\x3a\x0f\x19\xb7\xb0\x9f\x27\xf2\xec\xbc\xc4\xcf\x79\xf2\x77\x6b\xef\x7c\x71\xdd\xd1\x7f\x47\xbe\xc0\xbe\x91\xc2\xf7\xf7\x09\xec\xef\xeb\xa0\xb9\xde\x29\xe6\xff\x6b\x3f\xb2\xf1\x1f\x14\x63\xfc\x0f\xd2\x78\xd8\xef\x08\xf0\x6e\xe5\xb0\xfc\x6e\xc2\x7a\xf7\xc0\xcf\x67\x91\x96\x6e\x31\xc2\xce\x75\xa2\x7a\xa7\xe1\x3e\x9f\x3d\xc3\xce\x67\x9f\xa4\xf3\xd9\x14\xce\xe1\xd0\x9f\x9b\xc2\x3b\x9b\xa9\x77\x81\x97\xea\xef\xff\xef\xee\x02\x37\x84\xf0\xae\xa0\xde\x7b\xb7\xd2\x14\x70\xec\x14\xde\x59\x34\x70\x3e\x54\xe3\x9e\xa4\x28\x37\xe6\x36\x3d\xf1\x84\xea\x9c\x51\x9a\x9a\xc1\x38\x8c\xb8\xf2\x98\xff\xfd\x73\xbd\xf3\x21\xf4\xc6\x76\xab\xd7\xeb\x7c\x38\x80\x7c\xf8\x1f\x90\xd7\xc7\xe5\x23\x66\x7f\xc3\xf8\x0e\xe7\xc2\xe7\x23\xc0\xe7\xdf\xdd\xb1\xe4\x94\x1f\xf0\x4e\xb6\x4c\xf1\xc2\xf1\x86\xfd\x5d\x1f\x79\x12\xef\x67\xed\x73\x26\xce\xfb\xb1\xb7\x41\x97\x41\x2d\x5c\xb0\x04\x6a\xdd\x97\x5b\xdf\x8f\xee\x22\x4f\xe2\x1c\x14\xc3\xbb\x0d\xe4\xa7\xcc\xf9\xbb\x88\x8f\xfa\xe7\xd0\x65\x9f\x73\xa8\x0a\xa7\xbe\xed\x7c\x2f\xc6\x70\xaa\xfd\x1e\x0d\xf7\x82\x65\x5a\x2f\x76\x7e\xff\x3b\x57\x3e\x59\x54\xe2\x0f\x39\xaf\x59\xef\x79\x27\x40\x23\x81\xbf\x12\x72\x67\x7e\x31\x87\xf4\x99\x03\xf4\x1e\x37\x5d\x5e\x91\xda\xdb\xe7\xb9\xb7\x34\xd5\x3c\x51\xde\xd1\xab\xed\xff\x94\xfa\xeb\xc8\x67\x33\x22\x9f\x0d\x2b\xf3\x99\x31\x87\x3c\x81\xfd\x24\xa8\x51\xe0\x3e\xb9\x78\xfb\x7d\x71\x1e\x7c\x72\xf1\x66\x9d\xfb\xd6\x41\xad\xf7\x23\xf7\x41\x57\xa5\x78\x7a\x72\xf1\xf9\xc0\x23\x3e\xeb\x9f\xfb\x56\x1f\xf3\xdc\xb7\xb6\xcb\xf6\xfc\xbc\xbb\xec\xd3\xde\x5a\x1f\xa1\x16\xf7\x39\x77\xc5\xe7\x3c\x67\xaf\x93\x0d\x8f\x75\xf2\xef\x0d\xae\x93\x15\xe0\x03\x9a\x97\xa1\x00\xde\x21\xa0\x3f\xf5\xcf\x4b\xf4\xe1\xdf\x7a\x8f\x62\xcc\xd3\xfc\x0f\x35\xd3\xc3\xaa\xca\x31\xe8\xc1\x3b\x2d\xeb\x9d\x18\x65\x15\xc7\x39\x2a\xd8\x51\xeb\x1f\xc5\x29\xde\xa1\xdc\x41\x3c\xbe\x62\xbf\x4f\x36\xe3\xdc\xfa\xce\x97\x39\x5f\x64\xf8\x48\xc6\x37\xe9\xb2\x15\x87\xd7\xc1\x5b\x71\xfb\x1a\x78\xeb\x1e\x6e\x5a\xc2\x93\xb9\xd8\xeb\x2c\xfe\xde\x70\x8d\xe7\xa4\x72\x3c\xaf\xd7\xc9\x3b\x74\x80\x75\xe7\x1d\xba\x18\x4f\x97\xa7\x3d\xf2\x4e\x9c\xf4\x79\xe6\x9d\x1f\xa7\xf1\x76\xe4\x9d\x11\x9f\xbc\x53\xc1\xfb\x1b\x3b\xef\xd0\x84\x0f\x7c\x8c\xe4\x11\x9d\x1c\x18\xf8\x1c\xf8\xa6\xfd\x9a\x73\xbc\xdc\xfe\x3d\x55\xc7\xbf\xb0\xcb\xbf\x46\xf3\xa2\xf3\xde\x9e\xe3\xec\x66\xc7\x9f\xd6\xec\x2d\x33\xc7\x38\x8c\xbf\x7a\x32\xb3\xa7\x51\x26\x6b\x57\xc8\xcc\x76\xd7\x35\xfb\xdf\x75\xbd\x38\xf8\x92\xf6\xbf\x8e\x37\xa8\xaa\xdf\xd7\x05\xdc\x08\x6a\xf9\x3d\xb2\xbc\x0d\xf2\xc1\x90\x2c\x9f\x0f\x90\x3c\x1c\x96\xe5\x17\x21\x9f\x6c\x92\xe5\x07\x21\x5f\x64\x7a\x1e\xe8\x24\x1f\x65\x7a\xfe\x06\xf2\x69\xe6\xcf\x04\xfc\x59\x66\xf5\x5f\x84\x7c\x95\xc9\x8f\x58\x72\xe6\xcf\x7d\xe8\xd7\x5a\x64\xf9\x6d\xc8\xf7\x33\xf9\x3d\xd1\xbe\x45\xdb\x60\x7a\xf6\x06\x48\x7e\x8d\xf5\xeb\x2f\x75\x92\xf3\xfe\xde\x81\x9e\x4d\x26\xff\x36\xea\x47\x99\xff\x7f\x00\x79\x3b\x93\x87\x84\x9e\xbd\x5a\xbc\x59\x96\x9f\x0d\x90\x7c\x98\xe1\xca\x26\xc8\x47\x99\x7c\x5d\x27\xf9\x6a\x50\x96\xbf\x81\xfa\x83\x6c\x1c\x7e\x88\xfa\x3d\x7b\x65\xf9\x3b\x90\x27\x99\x7c\x0b\x7a\x16\x65\xb1\x96\x82\x3c\xcc\xfc\xf9\x3e\xf4\xe4\x99\xfc\x2d\xd1\xdf\x7d\x5a\x1f\xeb\xef\x57\x21\x9f\x69\x95\xe5\xa7\x21\xdf\x64\xf2\xe7\x20\x5f\x66\xfa\x05\xf8\xad\xca\x57\x99\xfc\x26\xe4\x23\xcc\xee\x1f\x42\xcf\x12\xd3\x7f\xc9\x92\xb3\xf9\xfd\x09\xcb\x1f\x26\x7f\x0d\xfa\xf9\xbc\xff\x1e\xea\xf7\x30\xfd\xe7\x20\x6f\x7f\x4a\x96\x7f\x16\xf2\xfd\x4c\x7e\x08\xf2\x28\x93\x7f\x17\x76\xf9\x38\xff\x0a\xe4\x6b\x4c\x3e\x20\xf4\xb4\x69\x7d\x2c\x1f\x3e\x0b\xf9\x30\x93\xff\x57\x80\xe4\xab\x6c\xdc\xfe\x47\x27\x39\x5f\x2f\xdf\x84\x7c\x85\xc9\x7f\x03\x7a\xfa\x58\x1c\xfe\x16\xec\x6e\x30\x79\x0a\xf2\x4d\x26\xbf\x0a\x3d\xdb\xac\x5f\xc3\x90\x8f\x30\xff\x5f\x15\xfb\x6d\x54\xe3\xbf\x4f\x08\xf9\x61\x97\xfc\xdb\x62\xbf\x3d\xe8\x92\x77\x0b\xf9\x87\x5d\xf2\x5f\x16\x7a\xf6\xb9\xe4\xcf\x0a\xf9\x5e\x97\xfc\x5b\x9a\x29\x6f\x72\xc9\xcf\x08\x79\xc8\x25\x0f\x09\x79\x9b\x4b\xbe\x20\xe4\x41\x97\x3c\x29\xe4\x2d\x2e\xf9\x9f\x09\xff\x7f\xcc\x25\x8f\x0b\xf9\x01\x97\x3c\x22\xfc\x3f\xe4\x92\xff\x8b\xa8\x1f\x71\xc9\xfb\x85\xfc\x69\x97\xbc\x0f\xd4\x9c\xae\xe7\x35\x0d\xaf\x16\x6c\x3e\xcf\xf8\x45\x07\xff\xf3\xd5\xbf\xe1\x3d\x36\x7f\xa2\xfa\xb7\x15\x96\xcb\x9d\xfa\x7b\x99\xfe\x5e\xa6\xdf\xe4\x67\x99\xfe\x95\x26\x99\x5f\x0d\xc9\xf6\xc2\x0e\x7b\xe6\x0b\x8f\x41\xd6\x7e\x8d\xf1\x1d\xba\xcc\x87\x9b\x65\x7d\x1d\x8c\xbf\x1e\xb4\xf9\x17\xaa\x7f\x4b\x41\xb9\xbc\xa7\x45\xb6\x3f\xc2\xf8\xed\x56\x9b\x37\xa1\x54\xfb\x5e\x7f\x7f\x93\xcc\xbf\x19\xc6\x6f\xb4\xc8\xfe\xcc\xb4\xca\xfe\xac\xb4\xca\xfa\xb7\xf6\xca\xf5\xf3\xfb\x64\x7f\x86\x99\xfd\x15\x66\x2f\x1e\x90\xf9\x85\x66\x59\x5f\x9c\xf9\xb3\xdc\x22\xeb\xd7\x3e\x55\xcc\x4e\x16\xb5\x5c\x21\x5b\xcc\x17\x2e\x7d\x31\x9b\x4a\x8d\x5d\xcc\x16\x53\x99\xf1\x5c\x2a\x9d\xc9\x64\xf3\x45\xed\x53\x85\xec\x85\x5a\xf1\xb3\xbc\xd4\xd1\xb0\x98\xc9\xa7\xae\x1e\x4f\x65\x2e\x5d\xbc\x98\xcd\x54\x4b\xd4\x62\x59\x9d\xaa\x50\x59\xc2\xed\x74\xab\xed\x74\xfb\xd9\xe9\xf6\xb4\x63\x97\x7c\x39\x9d\x1f\x37\x65\xc5\x42\x3a\x93\x2d\xa4\xc6\x8b\xe9\xe2\x95\x71\x2d\x75\x35\x5b\x18\x1f\xbb\x74\x51\x32\x36\x5e\x1d\x09\xb3\x3c\xcb\xd5\xd9\x05\xce\xea\x99\x0b\x97\xc6\x5d\x55\x49\x98\xba\x30\x96\xc9\x5e\x34\x4b\xc7\x8b\x85\x62\xfa\x8b\x55\x6a\x7c\xd9\xa4\x2f\xbd\xf0\xc2\xd1\xd4\xf3\x26\xe9\x4c\x75\x09\x7a\x3c\xd5\xf9\x3c\x89\x3b\x21\xb7\xf8\x1e\x93\x74\xa7\xba\x7a\x50\x1d\x7c\x27\xf8\x4e\xf0\xcf\xa1\xda\x73\xd0\x06\x9e\xe8\x51\xd0\x4e\x93\x5a\x43\x91\xca\x5e\xcd\x5e\x2c\xa6\xc6\xf2\x57\x8f\x93\x0c\x63\x35\x7e\x29\x93\x73\x48\x8b\x57\xf2\x17\xb2\xf9\xb1\x2f\x91\x48\x28\x3f\x4e\xba\x41\x3a\x8f\x43\x35\x4a\x8f\x99\xe4\x18\x91\xe3\xa9\x2e\xb0\x44\xbb\x6b\x7c\xe7\x31\xb4\x3a\xa6\x70\xa8\x5b\xe9\x50\xb7\xdb\xa1\x6e\x52\xd6\x4d\xba\xbb\xd1\x77\x48\x3b\x21\x26\xda\x59\x93\x1f\x3d\x0a\x97\x8e\x62\x48\x8f\xa2\x1d\xe4\x16\x3d\xda\x85\xf2\x2e\x94\x77\xa1\x1c\xfc\xd1\x4e\xd4\x03\xed\xea\x44\x7d\xf0\x9d\xe0\x89\x56\xeb\x77\xa0\x3e\x68\x57\x07\xcd\x4d\x17\xf8\x4e\xf0\x9d\xf8\x36\xf7\x38\xbf\x6f\xe8\x9a\x62\x37\xad\xe6\xdd\xcf\x12\xad\xb0\x42\x06\x1b\x6a\xff\xdd\x0c\x76\x3c\x11\xfb\xa8\xea\xc7\x60\x90\xf6\x5e\x9d\xf6\x93\xdc\x2f\xc6\x3f\xd4\x5c\x47\x17\xf1\x5b\xf8\x34\x51\x7c\x66\xd4\x62\x1a\xf5\xd3\x6a\x6f\xc9\xff\xd5\xc3\xfe\x12\x68\xbc\xc5\xdf\xfe\x3f\x7b\xd8\x5f\x82\xfd\x41\x87\xfd\xa0\xc2\xfe\xeb\x1e\xf6\xd7\xa0\xb4\x5e\xff\xbf\xe1\x61\x3f\xfc\x19\xd9\x8e\x69\x3f\xa4\xb0\x7f\xc5\xc3\xfe\x20\xf6\xa9\x9e\xb0\xbf\xfd\xcb\x1e\xf6\xa3\xb0\x3f\xe2\xb0\xdf\xa2\xb0\xff\x0b\xba\xda\xfe\x75\x40\xaa\xc1\xbd\xfe\xf6\x4f\xe8\x6a\xfb\x93\xb0\xbf\xe8\xb0\xbf\x57\x61\xbf\xe8\x61\x7f\xed\xa3\x44\x67\xf6\xf9\xdb\xcf\x7b\xd8\x6f\xff\x39\xa2\xd7\x1c\xf6\xf7\x29\xec\x9b\x5f\x73\x55\xf6\xf3\x9f\x24\xba\x5d\x27\xfe\x7e\x52\xf3\x88\x7f\xd8\x1f\x71\xd8\x6f\x53\xd8\xbf\x1b\x20\xfb\x3c\x07\x8c\xe2\x5e\x90\x23\x76\xbe\x7e\x3f\xe2\xd1\xfe\x2b\x0d\xb6\x5f\xf6\x68\x3f\xdd\x60\xfb\x67\x3d\xda\xcf\x37\xd8\xfe\x9f\x3c\xda\x2f\x35\xd8\xfe\x84\x47\xfb\x77\x1a\x6c\xbf\x5f\x57\xb7\xdf\x68\xb0\xfd\xd7\x3c\xda\xbf\x7b\x4c\x5d\x9f\xe7\xef\x23\x1e\xed\xb7\x3d\xda\x73\xfe\x77\x71\xdf\xeb\xfa\xe1\xdf\xed\x2e\x38\xce\x1f\xe6\xd3\x21\x2b\xfe\xac\x13\xe5\xff\x05\x00\x00\xff\xff\x11\xb0\xd5\x90\x88\x49\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 18824, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

