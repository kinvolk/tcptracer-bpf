// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x71\x6c\x5b\xc7\x79\xbf\x47\x8a\x26\x25\xcf\x93\xe6\x96\x09\xcd\xa1\x98\xd2\x05\x89\x26\xb4\x29\x65\x4b\x32\xa3\x2c\x9d\xea\x36\xa9\xa6\x19\x15\x97\x99\xad\x60\x2c\xa5\x18\x96\xb6\x14\x3a\x36\x2d\xd2\x96\x5e\x98\x6d\x2e\x8a\x64\x06\x91\x05\xb2\x93\x16\x42\x96\x66\xa2\x2c\x27\xea\x9a\x0d\x1a\xb6\xc1\x01\xba\x81\x5a\xe7\x61\xc2\x16\x0c\xc6\x5a\x0c\x1a\xea\x01\x42\x97\x75\xda\x86\xa2\xda\x9a\x79\x5a\x6a\x84\x03\xef\xfb\x3d\xbe\xf7\xbe\x77\xef\x91\xb2\xd3\xee\x1f\x3f\xc0\x3e\x7f\xdf\xbb\xef\xbe\xef\xbe\xfb\xee\xbb\xdf\xdd\x3b\xfa\xb7\x1e\x39\xfc\xa8\x4f\xd3\x84\xf1\x68\xe2\x7f\x84\x49\x99\x4f\x6c\xc4\xfc\xf7\x30\xfe\xfe\x59\xa1\x89\xea\x5d\xc4\x7b\x56\x08\xf1\xd3\x42\x88\x52\xc7\x56\xad\x4e\xeb\xe9\xbc\xe4\x97\xa2\xdb\x92\xae\x2e\x52\xbd\xa0\x4f\x88\xad\x5a\xad\x56\xbd\x04\xda\x2f\xc4\x76\xad\x56\x8b\x30\xa5\x57\xda\xcc\x76\x7d\x75\x1a\xfc\x2f\xa3\xd4\xef\x4e\x30\xbd\x23\x52\xcf\x15\xb4\x53\x8a\x0e\x3b\xf4\x8e\x28\xf4\x3c\x2b\xfb\x2c\x44\x58\xec\x96\x6f\xf4\x5d\xc4\x6f\x45\xce\x2f\x84\x38\x1e\x14\xa2\x5b\x08\x31\x83\x32\x19\xf4\x69\x5c\x7e\xd8\x43\x6f\x35\x48\x74\x38\xf8\x23\xea\xd7\x69\xd0\xda\xff\x12\x5d\x41\xbf\x7c\xe8\x57\x6f\x8c\xfc\x5b\x40\x3d\xff\x67\xa4\x1d\x49\xff\x0f\x65\x7b\xfa\x74\x48\xf2\x1f\xdf\xfb\x9f\xe4\xc7\x76\xc8\xbd\xbc\x59\xa3\x72\x03\xe5\x3a\xca\x6b\x28\xd7\x50\xae\xa2\x7c\x13\xe5\x0a\xca\x65\x94\x0b\x28\xe7\x1b\x76\xf9\xa4\x5d\x93\xc4\x8f\xe6\xc9\xbe\xd3\x5d\x18\x87\x59\xa2\xa7\x23\xb0\xbf\x87\xea\xf5\x9e\x03\xbf\x1b\xfc\x6e\xf0\xcf\x13\x3f\xdf\x43\xfc\x8e\x39\xa2\xcf\xc4\x88\x3e\x4a\x7a\xf5\x62\x9c\xfc\x33\x4b\xd1\x58\x2a\xc3\xbe\x51\xb2\x4f\x9f\xa5\x80\xd5\xa7\x13\x68\x1f\xfd\x29\xaf\xd8\xfa\x99\x9e\x2e\xca\xf7\x99\xde\xeb\xb0\x67\x16\x34\xf9\xa9\xfa\x0b\xe4\xbf\x99\x76\x1a\xdf\xdc\xcb\x6f\x4b\xfe\x8c\x4f\x88\xba\x45\xb9\xde\xef\xa1\x9d\x3c\xe4\xc8\xaf\x53\xd3\xe7\x24\x9d\xeb\xdd\xc4\xfb\x2f\x48\xfa\xb8\x8f\xda\x49\xeb\x13\x92\x1e\xbb\x48\xed\xa7\xf5\x49\x2a\x0b\x27\xa8\x9e\x9f\xea\x8d\xbd\x88\xf1\x1b\xc2\x38\xf5\xd2\x38\x65\xb5\xb4\xf4\x7b\x58\x7b\x06\xf1\x72\x91\xe2\x58\xd3\x24\x3f\x20\xfe\x88\xc6\x1f\x71\x97\x8b\x3e\x26\xe5\x3a\x9f\x23\xba\x5a\x41\x7c\x6a\x42\x3c\x56\xab\xd5\x8c\x71\xac\x66\xcc\xf8\xac\x4f\xc1\xa9\x0a\xc9\xe5\xa2\xd4\x8f\x80\x78\x15\xfd\x1c\xaf\x51\x79\x93\xde\xf7\x1e\x41\x79\x03\x76\x4e\xe2\xfd\x36\xe2\x81\xc6\xdf\x68\xbf\xf3\x03\x4e\x3b\xc6\x61\x47\x9b\x45\xbf\x7e\xba\xbb\xa9\xdc\x4d\xa5\x5c\x4f\x53\xb9\x23\x96\x7e\x9b\x72\xb1\xa6\x72\x37\x94\x72\x14\x8f\x9d\x77\x39\xeb\x4f\xa2\x7e\x48\xe1\x5f\xfd\x34\xc5\xaf\x7e\x89\xfc\xa5\xd2\xb7\xad\xe8\x5f\x7a\x09\xfe\x1f\xa5\x7c\x90\xbe\x44\xe3\x90\x19\xea\xa7\xf8\x5b\x34\xc6\x23\x4e\x74\xe5\x06\xc6\x71\x88\xea\x5f\xa6\x71\xc9\x1c\xfd\x45\x59\x86\xdb\x72\xb6\xb8\x9b\x41\x19\xf6\x53\x5c\x7e\xce\x27\x44\xad\x26\x44\xd8\x77\x8c\x68\x0d\xb4\x46\x71\x6d\xe4\xa9\x52\x74\x92\xe5\xe1\x59\x5b\x5e\xb0\xf6\x2b\x8f\x7e\x75\xa1\x5f\x5d\x2c\x6f\xc6\xd8\x3a\x31\xa9\xc8\xa3\x01\xf1\x98\x2c\xc3\xda\xfd\x32\x0f\x86\xb5\x87\xa5\x7f\xea\xf3\x20\x20\xdf\xd3\xfc\x37\xec\xc9\x44\x8f\xc0\x1e\xf2\x5f\xe7\xa3\xee\x71\xe8\x3d\x5e\xe3\xae\xe3\x75\x44\x31\x5e\xc7\x05\xfc\x8a\xb2\xde\x8f\xff\xaa\xd5\x6a\x46\x3f\x1e\xef\xea\x6b\xd8\xa9\x49\xfb\x56\x31\xdf\x62\xcc\x7e\x1a\x67\xbd\x42\x79\x54\x15\x6f\xd6\xf9\xc0\xed\x4f\x57\x10\x27\xd1\xeb\x68\xff\x5e\x5b\xfb\xb9\x28\xc5\x49\xe7\x2e\x67\xbb\x37\x3c\xf3\x84\x11\x5f\x6f\xa3\xdd\x7d\xcc\x6e\xe4\x81\x4a\xb7\xab\xdd\xdb\x9e\x76\x23\x5e\xa3\x1b\x68\x7f\x0f\xb3\xfb\x18\xb5\xfb\x59\x67\xbb\xc7\x3c\xed\x3e\x06\xbb\xbf\x87\x76\x69\xa1\x4d\x57\x8e\x40\xdf\xba\x03\x47\xb4\x12\x97\xcd\xf0\xcb\xff\x1b\x6e\x8a\x70\xdc\x94\x60\xf3\x75\xc4\xa1\x37\xe1\x85\x5f\x10\x27\xe1\x5d\x37\x45\xab\x72\xf5\x79\xaa\x1f\x13\x8e\xfa\x5e\xf8\xcc\xc4\x49\x3f\xa0\x7e\x34\x70\xd2\xf7\x89\x5e\xe4\xfd\xe8\xae\xd9\xeb\x3d\x46\x38\x49\xfb\x57\xc2\x49\xa7\x81\x93\xee\xf9\x17\x61\x97\x03\x2e\x8a\x62\xbd\x8d\x02\x17\x61\x3e\x96\xa2\xc0\x11\x51\xe0\x88\x28\x70\x47\x14\xb8\x28\x3a\x8f\x72\x0e\x25\xe1\x99\x2b\x7e\xe0\xa4\xa1\x71\xac\x8f\x13\xc0\x1b\x84\x93\xf4\x02\xf0\xd1\x50\xde\xb6\x7e\xea\x05\x5a\xff\xf4\x22\xf0\xd0\x28\xe1\xa6\xd2\x10\x70\x55\x21\x86\xf7\x71\xbc\x87\xde\x21\xe0\xa8\x02\xf2\x55\x71\x04\xef\x61\xe7\x10\x70\x54\x01\xf8\x68\x68\xd9\xd6\xaf\x74\x11\xb8\x68\xf4\x2d\xe0\x2d\xe0\xa2\x51\xf2\x4b\xf5\x11\xf2\xd7\x4c\x00\xb8\xe8\xe8\xb7\x09\x17\xb5\x01\x17\x8d\xfe\x03\xda\x01\x2e\x1a\x25\x3f\x4e\x15\x81\x8b\x46\xd7\xf1\x1e\x78\xa7\x0d\xb8\xe8\x0c\xad\x37\x63\x47\x30\x1e\xa3\xc0\x69\x45\xc2\x4b\xe9\x33\xc0\x51\xd0\x3b\x06\x3b\x4a\x47\x8d\x71\x89\xa3\xa4\x75\x31\xe9\xfb\x9a\xa8\x87\x68\xf5\x75\xc4\x59\x50\x88\x37\x6b\xb5\x5a\xe7\x20\xe2\xcf\x92\x27\x62\x96\xf5\xc8\x91\xf7\x2b\x68\xf7\x6e\x8a\x1b\xbd\x12\x03\x8d\x76\x2c\x71\xdc\xcd\xe6\xe9\xb8\x72\xdd\x7a\x89\xfa\x11\xc2\xba\x80\x32\x19\x7a\x91\xc5\x23\xf4\x20\x9e\x4b\xd1\x2d\x94\x9b\xc8\x5b\xef\xa2\xdc\x06\x7f\x03\x79\x0b\xeb\xc4\x69\x1a\x5f\x8e\x67\xea\x76\x75\xb9\xf4\x3f\x64\x5b\xef\xdc\xe5\x23\x4c\xbe\x7b\x07\xf2\x56\xb9\xad\x1d\xea\x0d\x31\xf9\x4d\xa5\x7c\x73\xfc\xf7\xee\x2d\xe2\xbf\xed\x1d\xe2\xbf\x8d\x96\xf0\xc4\x86\x2b\x9e\x50\xe2\xdb\xaf\x21\x2e\x5e\xa6\x7c\xa2\xbf\x86\xf8\x78\x92\xf2\x4a\x35\x4d\xf2\x63\x17\xa8\xd4\x5f\x47\xdc\x3c\x8d\xbc\xb2\x8c\xfd\x60\x99\xf2\xcd\xd4\x12\xe2\x68\x74\x16\xf8\x71\x1b\xf8\xf1\x69\x86\x2f\x9f\x21\xbc\xa8\x7d\x9c\xec\xfc\x22\xf4\x34\xf2\xec\x43\xc4\xff\x04\xd1\x26\x4e\x24\xff\x54\xef\xe1\xfc\x01\x49\x97\x46\x43\xc8\x4b\x5d\xc8\x7f\x11\x96\xcf\x87\x6d\xf3\x5b\xaf\x24\x6c\xf3\xdc\xea\xaf\xb8\x02\x57\x26\xdb\x69\xa1\x32\xfc\x72\x5c\xc3\xbc\x43\x19\x91\xcb\xbe\x89\xc7\x3e\x74\x0f\x2d\x38\xc9\xe0\x3e\x5b\x3f\x9b\xc9\x3d\x7e\x0f\x0d\xe0\xcc\x2e\x7a\x9f\x79\x92\xc6\xc5\x98\xdf\x99\xf2\xbd\xb0\x9f\xfa\x7b\x5d\x23\xfb\x72\xd1\x1e\xf0\x23\x8c\xdf\x0b\x7e\x17\xe6\xf5\x47\x1c\xeb\x33\xcf\x37\x31\x65\xbe\x41\xff\x2d\x72\xe3\x2d\xc8\xed\x04\xc7\x84\x24\x9e\x18\x66\xe3\x46\x79\x5e\x3f\x4e\x79\x5d\x9f\xcc\x3b\xec\x58\xf7\x5a\xf7\x71\x7e\x11\x6e\xbf\x4c\xf2\x88\xe7\xa4\x76\x49\xae\xe7\xd5\xd3\xea\x71\xa9\xe3\xff\xa0\xac\xf7\xaa\x6c\x87\xe3\x9b\x1c\xd6\xb9\xd6\xcf\x87\x08\x17\xea\x78\x1f\xd6\x3a\xa4\xfe\xdb\x6f\xb7\x8c\xf1\xf9\x6d\xb4\x4f\xeb\x74\xf5\x4b\x54\x4f\x95\x0f\x56\x14\xf9\x67\xaa\x42\x7a\x93\xda\xf7\x6b\x3e\x1b\xee\x5e\x41\xdc\x6c\xc1\xbe\x0d\x94\x37\x6b\x56\xbb\x33\x58\x4f\xf4\x0b\x91\x96\xf5\xdb\xf2\xd1\x85\xee\xa6\x72\x5b\x4a\xb9\x9e\xa6\x72\x1b\xaa\x7c\x7b\x21\xd6\x54\xee\xa6\x52\x0e\x79\x3a\xe2\xac\x3f\x62\xcd\xd3\x5f\x32\xc7\x89\xe4\x8c\x3c\x3d\xe2\x9a\xa7\x37\x95\xfb\x74\xf8\x7f\x74\x1e\x79\x74\x0b\x79\xf4\x15\xe4\x59\x8c\x47\x2f\xe1\xb2\x29\xec\xcf\x72\xd1\x45\xaa\x7f\x99\xc6\x25\x73\x74\x89\xf2\x6e\xdb\xa7\xa4\x3e\xe7\x3e\x9d\x12\xae\xb9\x4f\xff\x25\xa2\x1b\x79\xf6\x61\x92\x73\x9c\x57\xd2\x3c\x09\x08\xda\x7f\x5a\xe3\x76\xde\x33\x6e\x0f\x48\xda\x8c\x7f\x35\x3e\x56\xc5\x8d\xc4\x0d\x7e\xbb\x7f\x9f\x95\x36\x98\xe7\xb8\xfa\x25\xca\x23\xbc\x9f\xa5\x21\x13\xe7\x6b\x32\x6e\x69\xfd\x4b\x57\xfe\x04\x71\xfc\xeb\xa0\xe7\x41\xe7\x41\xbf\x02\xba\x08\x9a\xfc\x5d\xdd\x4b\x76\x5c\xc7\x7a\x91\xeb\xa5\xf5\x6f\x06\xf9\xd7\xcc\xc3\x58\x07\x2b\x4b\x68\xe7\x19\xe4\x65\xa3\xdf\x58\x57\x2b\x46\xff\xb1\x0e\x2f\xa1\xff\x6d\x14\x5f\xc6\xfa\x13\xf1\xd9\xfd\x7a\x25\x20\x44\x1c\x7e\xd8\xd7\xe2\x38\xf8\x2d\xfb\x55\x33\x2f\xf9\x28\x2f\xa1\x5e\x63\xdf\x77\xdb\x79\xe5\xbf\x6b\x1d\x8a\x7c\x67\xee\x77\x76\x88\x4b\x2f\x24\x94\xf6\xa8\x70\xe9\x88\x0a\xdf\x79\xc8\x73\x5c\x3a\xbf\x03\xf9\xa6\xb8\xd4\x43\x6f\x4b\xb8\xb4\x85\x7c\xa7\xc4\xa5\x2d\xe4\x3b\x25\x2e\xf5\xc8\x77\x1b\x2d\xe5\xbb\x1d\xe2\xd2\xc6\x39\x20\xc5\x8d\x7e\x19\xf1\x81\xfd\xd9\x58\x18\xf1\x88\x3c\x58\x1a\xa2\xf9\xa3\x2f\x01\x8f\x1a\xfb\xc4\x45\xc4\x4f\xef\x35\xe4\x45\xe0\xd1\xe8\xdf\xd3\x3c\x5c\x00\x1e\xed\xa0\x7d\x67\x38\x50\xa1\xf6\xfb\xa9\xfd\x70\xdb\xef\x49\xda\xcc\x87\x5f\x25\xba\x91\x0f\x7f\x97\xf2\x8b\x23\x1f\xee\x92\xf9\xd0\x3a\xff\x56\x3c\xe7\xdf\x45\xc7\x7a\xef\x56\x9f\xf2\xe6\xf3\x0c\x1f\xa9\xcf\x0f\x54\xf1\xfb\xe3\xc9\x9b\xaf\xd8\xf2\xa6\x8e\xf9\xae\x2f\x22\x8f\xf5\xda\xcf\x6f\x8d\x7c\xa7\x2f\xe2\x5c\x04\xdf\x6b\x4a\x51\x7c\xcf\xa9\x5c\x73\xc9\xab\x74\x2e\xc1\xf1\x72\xf5\x83\x54\xa6\xe8\x18\x52\x9e\x1f\xc8\xbc\x8b\x32\x37\x7a\xb1\x91\x8f\x25\x7e\x8e\xbe\x04\x3d\xcb\x2c\xef\x2e\xdc\x72\xde\x4d\x58\xf2\x6e\x40\x50\xff\x0c\x5c\xcb\x71\xac\x79\x6e\x16\x6f\xd0\x72\xfe\x84\x10\xd7\x53\x3b\xc4\xb7\x8d\x73\xad\x8f\x90\x3c\xf0\x6c\x52\xeb\x95\xf1\x55\x7a\x12\xfb\x1b\x7c\xb7\xb9\x02\x3d\xa5\x32\xf9\x3f\x53\xa6\xf8\x37\xf6\x9f\x55\x7c\x2f\x52\xcd\xd7\x35\xe5\x3e\xd9\x98\xe7\x6b\xae\xf3\xfc\xdb\x8a\x79\x5e\x2a\x53\x9c\xe5\xca\x0b\x8e\xf8\xf7\xfa\xde\xe9\xc4\xd1\x9d\x84\xe3\x27\xe1\xbf\xd7\x62\xca\x7d\x5f\x2e\x7a\xbb\x7a\x7e\xcd\x7b\x5d\xf4\xf0\xdb\x82\x72\x5d\x84\x3d\xcc\xee\xa4\xb6\xc9\xf0\xf7\x5c\x13\xfc\x3d\x6c\xc7\xdf\xc6\x77\x32\x0f\x7b\xe6\xbc\xbe\x93\x79\xc8\x29\xf1\xb7\x71\x4e\xe2\x21\xa7\xc4\xdf\xc6\x39\x89\x87\x9c\x12\x7f\x1b\xe7\x24\xfb\x9c\xf5\x87\xad\xeb\xd1\x8b\xe6\x78\xda\xe3\x74\x78\x87\xf8\x1b\xfe\xc7\xb9\xa7\x89\xbf\x97\x18\xfe\x5e\x66\xf8\xfb\xf7\x19\xfe\x7e\x03\xf8\x9b\x26\xac\x13\x7f\xd3\x46\xd9\x5c\x6f\x28\xfe\x8c\xf5\x26\xa9\xfd\x1d\xd9\x6b\x89\xdf\x7a\x5c\x05\xc4\x5f\xbc\x2f\x71\x98\xd4\x96\x18\x3e\x33\xce\x4b\xe6\x6e\x0d\x9f\x19\xe7\x6f\xcc\x1e\x15\x3e\x1b\xf6\x3a\xbf\x53\xc8\x73\x7c\x36\xb7\x03\xf9\x96\xcf\x0d\x15\x7a\x77\x74\x6e\xe8\xa1\xd7\xf3\xdc\xd0\x43\xce\xf3\xdc\x50\x31\x1f\x36\x5a\x9a\x0f\x3b\xc4\x67\x4b\x88\x0b\xe3\x9e\xc4\x25\xe3\x7b\xc1\x32\xd6\x75\xc4\x49\x2f\x70\x40\x65\xd3\xb6\xaf\x9b\x5a\x40\xdc\x74\xd0\x3a\x39\x85\xef\xc8\xb9\xa3\xdf\xa4\xf9\xf2\x3a\x70\xd9\xd3\x57\x29\x3f\x1e\x24\x7b\xc6\x3e\x4d\x65\x38\x78\x9c\xec\xc4\xb9\xf9\xd8\xfd\x06\x9f\xce\xf5\x3f\x07\x74\x10\x16\x4f\x10\x1d\x00\x1d\xa0\xf3\xff\x64\x5b\x40\x96\x7c\xfe\x45\xe4\xf4\xb3\x9c\xdf\x7d\x92\xce\xbb\x92\x3e\x5a\x38\x9b\x9f\xdb\x7d\xb1\xe1\xdf\x80\xe5\x1c\x8b\x9f\xcf\x97\xca\xe6\x3d\x23\xbf\x9c\x2f\x09\xf8\x29\xce\x70\xca\x11\xb6\x8e\x4d\xc0\x8f\x06\xee\x7a\x03\xf3\x6d\x12\xf4\x9f\x81\x3e\x61\xc3\x59\x4e\x1c\x45\x38\x2c\x12\xb4\xdb\x6f\xd4\x4b\x4d\x53\x39\x83\xfa\xa6\xdc\x34\xb3\xaf\xe8\xc0\x99\xe3\x8a\x73\x53\xbd\x82\xfd\xf3\x22\xf0\x1f\xee\x29\x54\x81\xb3\x67\xf0\xdd\xa6\x4a\xe1\xef\xf8\xce\x5d\x05\xde\x0f\x0b\xac\x6b\x06\xdd\x46\x00\xab\x4a\x9f\xbf\x1a\xe3\x6e\xd6\xdf\x6b\x7b\x9f\xca\x0b\xbb\xbc\x44\x61\x76\x9c\x37\xec\x81\xf3\x8c\xfd\x0d\xdf\x67\x1b\xfd\x73\xed\xd7\x5e\xbb\xde\xcc\x90\xb1\x9e\x10\x0e\xbd\x1e\x80\x7f\x71\x2f\xc9\xdd\xff\x2f\x33\xff\xbf\xe2\xc0\x33\x73\x9e\xfb\x8c\xcd\xf7\x78\xfd\x05\xcf\xfa\xdf\x7d\x4f\xfc\x44\xe3\x79\x81\xc5\xf3\x92\x2d\x9e\xd3\xc0\xeb\x6e\xf1\xec\x3c\x6f\x99\x66\xf3\xa4\xb5\x78\xbd\xdd\x78\x08\x88\x6f\xfc\x44\xfd\x66\xec\x5b\xf4\x45\xec\x67\xe0\x0f\x73\x5f\xc3\xf7\x63\xf8\xfe\x6b\xdc\xab\x73\xcd\x13\xe7\xd5\xfb\x2d\xac\x13\xa9\x9f\x47\x9c\x62\x3d\xbf\x8e\x32\x37\x54\x66\xf6\x3f\xff\x63\xf3\x7b\x42\xfa\x98\xf6\x8b\xe6\xfd\xc6\x6d\xbb\x7f\xf6\xd9\xef\x2b\x18\xf7\x0d\xf8\xbe\x2b\xdc\x4e\xe7\x9f\xd6\xf9\xa1\xba\x1f\xe1\xdc\x77\x0d\xc9\xd2\xdc\x77\xc5\x69\xdf\x55\xc6\x7e\x19\xed\xe7\xca\xb8\xdf\x52\x7e\x07\xf8\xa8\xf9\x7a\xff\xce\x0e\x70\x42\x10\xf7\x03\x9a\xdd\x33\x2b\x95\x81\x47\xcb\x5b\x2d\xef\xfb\xd4\x38\xc7\xc0\x0f\x9b\xae\xf8\x41\xb5\x5f\x28\x95\xe7\xe1\x87\x09\x47\xfe\xf2\x3e\x2f\xe6\xfb\xb1\x3d\xec\xfb\x09\xda\x8d\xde\x6e\xbb\xbf\x72\xcb\xfb\xbc\x89\x7a\x7f\x43\xf8\xce\xe5\xc0\xd9\x13\xc0\xd9\xff\x56\xf3\xd9\xf2\x03\xee\x51\xe0\x7b\x24\xc7\x19\xa5\xa8\xf1\x9d\x12\xf9\x11\xf7\x54\xcd\xfd\xa1\xf7\xfd\x92\x74\x05\xfb\x95\x28\xdd\xc3\x30\xbf\x2b\xbe\xd1\xf2\x7e\x71\xd5\x63\xbf\xa8\xc2\x9d\x57\xad\xf7\xb0\x18\xee\x34\xef\x79\xe1\x9c\xae\x42\xf3\xc1\xcc\xdb\x7f\xe3\xc8\x17\x2b\x4a\x5c\x61\xcf\x5b\xc6\xbd\xd8\x19\x94\x61\xdf\x5f\x5b\xf2\x17\x3d\x75\x97\x7d\x74\xef\x55\xf8\x65\xcd\x26\x6f\xee\xbb\x56\x95\xe3\x40\xf9\x45\x13\x1f\xdd\x4b\x38\xcb\x9a\xaf\xea\xf1\xa5\x57\xc6\x1d\xfa\xa4\x7f\x2f\xd1\xf8\x05\xc4\x73\xef\x73\x1c\x7d\x5d\xee\xd7\xde\xbf\x38\xc2\xbd\xee\x1d\xde\x5f\x32\xe3\xeb\x6d\x97\xf8\x6a\xbe\x0f\xbb\x76\x9b\xfb\xb0\xf5\x1d\xca\xf3\xfd\xe7\xaa\x87\xbc\x11\xdf\xc1\x76\xe7\xbe\x73\xcd\x63\x7f\x65\xc6\xf9\x86\x4b\x9c\x7f\xb7\xc5\x38\x5f\xc3\xfa\x4d\xfe\x4f\xfa\xf0\x1d\x1e\xfd\x69\xbe\x8f\x69\x47\x1c\xe2\x3b\xfa\x12\x8d\x6b\xb2\x8d\x36\x56\xd5\x01\xb4\x83\xfb\x50\xc6\x7d\x2c\xca\x0a\x96\xfd\x4d\xa0\xaf\xd1\x3f\x8a\x37\xdc\x3f\x7b\x1d\x71\xf5\xb4\x79\x6f\xd7\x67\xf9\x6e\x96\x79\xb2\xc8\xf0\x8b\x1d\x7f\xa4\x2b\x6f\x21\x7e\xce\x83\xbe\x0e\xfa\x79\xd0\xc6\x79\xd7\x9c\x0d\xe7\xe5\xa2\x17\x59\xfc\xbd\xe4\xf0\xe7\xac\xd2\x9f\xe7\x9b\xe4\x8d\x61\x97\xbc\xf1\x30\xf4\xcd\xb9\xe4\x8d\x07\x9b\xe4\x8d\x01\x47\xde\x98\xf0\xc8\x1b\x55\xfc\x3e\xc3\x89\x2f\xe9\xfe\xc6\x18\xee\xc1\x84\x35\xba\xdf\x31\xf6\x49\xd0\xfe\x1e\x9b\xdf\x9c\x76\xde\xdb\xc4\xce\xee\x5b\xca\x6f\x26\x1e\xfb\x77\x49\xb7\x59\xfe\x88\x36\x71\xe7\xc1\x73\xc7\x2f\xea\x47\x03\x1e\x97\x70\xf9\x8e\x5f\x1a\xcf\x1d\xbf\xa8\x1f\x0d\xf9\x5c\xae\x53\x77\xfc\xd2\x78\xea\x7e\xe9\xb9\xe3\x17\xc7\x63\xcc\xa3\xf3\xf8\xf7\x9d\x87\x9e\x4f\x27\x0e\x8b\xf7\x2c\xbf\x23\xe2\xcf\x57\xe4\x7d\x81\x80\xe8\xda\x65\xe7\x7f\x1c\xfc\x2d\xc6\xff\x96\x8f\xf8\xcb\x41\x3b\xff\xcb\xe0\xf7\xf8\xed\xfc\x28\xf8\x09\x56\xff\x87\x1a\xf1\x43\x21\x3b\xff\xcf\xc1\x8f\x31\xbd\xcf\xc1\x9e\x09\x56\xff\x18\xf8\x79\xc6\xff\x0c\xf8\xe7\x98\x3d\xdf\x42\xfb\x0b\xac\xfe\x65\xf0\x57\x18\xff\x6f\xa5\xfd\xed\x22\xc6\xec\xdf\x0b\xfe\x24\xe3\xff\x87\x46\x7c\xc1\xda\xf9\x53\xf0\x63\x8c\xff\x9a\x9f\xf8\xc3\x8c\xff\x16\xea\xcf\x31\xfb\x07\x25\xbd\x5b\x5c\x63\xfc\xdf\xf1\x11\x7f\x3c\x60\xe7\x77\x80\x7f\x9e\xf1\xff\x59\x23\xfe\x3c\xe3\xff\x01\xf8\xcb\x8c\xff\xc7\x68\x67\x9d\xd9\xf9\x1b\xe0\x87\xda\xed\xfc\x9f\x83\x9d\xcb\x76\xb6\x38\x86\xfa\x7c\x92\xfe\x08\x7a\x13\x8c\xff\x82\x6c\x67\x8f\x18\x67\xb9\xee\x24\xf8\xb3\x1d\x76\xfe\x67\xc1\x5f\x63\xfc\xbf\xf4\x11\x7f\x9d\x9f\x13\x81\x9f\x67\xed\xff\x26\xda\x99\x67\xed\x3c\x60\xb4\xcf\xc6\xfd\x0c\xda\xd9\x66\xfc\xb3\xa8\x1f\x61\xed\x7c\x1e\x7c\xf1\x53\x76\xfe\xa3\xe0\x6f\xed\xb6\xf3\xef\xf3\xab\xed\x8f\x80\x9f\x67\xfc\x25\xd8\x73\x8e\xf1\x53\xe0\x6f\x32\xfe\x37\x24\xbf\x53\x2c\x33\x3f\x7c\x47\x23\x7e\x37\xeb\xd7\xab\x7e\xe2\xf3\xf8\xff\x3a\xda\xe1\x71\xf2\x14\xf8\x1b\x8c\xef\x03\x7f\x8b\xf1\xbf\x0a\xfe\x36\xb3\xf3\xaf\x60\x4f\x82\xed\x53\x5e\x05\x7f\x82\xf1\x9f\x95\xfb\xc9\x88\xe0\xcf\x7d\x92\xbf\xcf\xc1\x7f\x47\xee\x27\x3f\xe0\xe0\x3f\x24\xf9\x1f\x74\xf0\x3f\x2f\xdb\xd9\xe3\xe0\x7f\x4c\xf2\x77\x3b\xf8\xdf\x94\xb8\xc6\xef\xe0\x1f\x95\xfc\xa0\x83\x1f\x94\xfc\x4e\x07\x7f\x59\xf2\x03\x0e\xfe\xb0\xe4\xb7\x3b\xf8\x1b\xd2\xfe\x9f\x71\xf0\xef\x97\xfc\xbd\x0e\x7e\x58\xda\x7f\xb7\x83\xdf\x21\xcf\x57\xc2\x0e\xfe\xaf\xca\x76\xee\x72\xf0\x8d\xff\x16\xa2\x3e\x3c\x07\x05\xed\x75\xad\x74\x9e\xd1\x2b\x16\xfa\x90\x10\x62\x3b\x60\xd2\xf5\x2d\xf0\x5c\xc8\xfe\xde\xda\x7e\x9c\xb5\x1f\x67\xed\xd7\xe9\x05\xd6\xfe\xac\xdf\x4e\x6f\x06\xed\xfa\xba\x2d\xfa\x3e\xc5\xf4\xd5\xeb\x5f\x63\x74\x8f\x66\xa7\x37\xfc\xf6\xf6\xe2\x96\xfe\xd4\xc7\x6a\x92\xf5\x6f\x93\xe9\x8b\xb4\xdb\xe9\x95\x0e\x93\xfe\x84\x10\xf8\xf5\xb2\xa9\x6f\x98\xe9\x5f\x66\xf4\x6a\xbb\x5d\xff\x6c\x87\x5d\xff\x72\x87\x5d\xdf\xb5\xdd\xf6\xfa\x23\x7b\xec\xfa\xc7\x99\xfe\x35\xa6\xaf\xdb\x67\xa7\xcf\xb7\xd9\xdb\x5b\x0d\x31\x7f\xb4\xdb\xdb\x17\x0f\x14\xb3\xb3\x45\x91\x9b\xce\x16\xf3\xd3\xa7\x9e\xc8\xa6\x52\x53\x27\xb3\xc5\x54\xa6\x90\x4b\xa5\x33\x99\x6c\xbe\x28\x1e\x98\xce\x9e\x68\xbc\xfe\x18\x7f\x6b\x11\x2c\x66\xf2\xa9\xb3\x83\xa9\xcc\xa9\x93\x27\xb3\x99\xa2\xc8\xa9\xd9\xf6\xe6\x54\x2f\x95\x6f\xb8\x9e\x7e\xb5\x9e\x7e\x2f\x3d\xfd\xae\x7a\xcc\x37\x4f\xa5\xf3\x85\x3a\xaf\x38\x9d\xce\x64\xa7\x53\x85\x62\xba\x78\xa6\x20\x52\x67\xb3\xd3\x85\xa9\x53\x27\x6d\xca\x0a\xd9\xa2\x7c\x9f\xe5\xcd\x99\x2f\xac\xd5\x33\x27\x4e\x15\x1c\x55\x89\x99\x3a\x31\x95\xc9\x9e\xac\xbf\x2d\x14\xa7\x8b\xe9\x27\xc4\x03\x05\xfd\xa9\x7a\x79\xf8\xd0\xa1\xc1\xd4\x83\xf5\xa2\x2f\xb5\x5f\x96\xfd\xa9\x3e\x59\x1e\x40\xd9\x87\x72\x30\x15\x27\x76\x1c\xb5\xe3\xc4\xed\x8b\x43\x0a\xaf\xfb\xf0\xde\xe0\x1f\xa4\x6a\xfb\x0f\xa2\xda\x41\x54\x3b\x88\x6a\x07\x1b\x1e\x49\x65\xcf\x66\x4f\x16\x53\x53\xf9\xb3\x83\xc4\x83\xcb\x0a\xa7\x32\x39\x0b\xb7\x78\x26\x7f\x22\x9b\x9f\xfa\x02\xb1\x0e\x1f\x3a\x34\x90\x1a\xa4\xb6\x07\xa1\x0a\xdc\xfd\x60\x1b\x74\x1f\x68\x2a\xfb\x50\x0e\xa6\x06\xe8\xf5\x00\xa4\x07\x20\x05\xba\x0f\xaf\xa9\x3c\x80\xb2\xaf\x5e\x3a\x0d\xef\x57\x1a\xde\xef\x34\xbc\x9f\x1a\xed\x27\x5d\xa0\x0e\xa0\xdc\x0f\x76\x5f\x3f\x54\x19\xef\x0f\xc0\xf5\x07\x60\x12\xca\x03\xfb\xc1\xdf\x0f\x3e\xca\x03\x7d\x68\xaf\x0f\xef\x41\xf7\x81\xa6\x72\x30\xb5\x3f\x46\x5d\xdb\x1f\x13\xb7\xff\xbc\x80\xef\xe5\xfc\x39\x47\x3f\x6b\x11\x7f\xc8\x5e\xf2\xbd\x9e\x86\x3f\x6c\xfb\x80\xff\x93\xc8\xf9\xf0\x2d\xf4\xbb\x4d\xe4\x67\x19\x9f\xc1\x16\x71\x83\xd0\xbf\xe3\x19\x3e\x44\x25\xae\xab\x88\x28\xee\x61\x18\xf2\x06\xff\x9f\x5c\xf4\xbf\x89\x72\x35\xe4\xad\xff\x1f\x5d\xf4\x27\xa0\x3f\x61\xd1\x1f\x50\xe8\xbf\xe8\xa2\x7f\x16\x8d\x36\xeb\xff\x0b\x2e\xfa\x17\x14\xfd\x0f\x2a\xf4\x9f\x71\xd1\xbf\x85\x46\x13\x4d\xfa\x7f\xda\x45\xff\x0a\xf4\x4f\x58\xf4\xb7\x2b\xf4\xff\xb2\xe6\x32\xfe\x80\x48\xeb\x1d\xde\xfa\x1f\xd1\xd4\xfa\xbb\x70\x7e\x3f\x67\xd1\xbf\x5b\xa1\xbf\xe8\xa2\x3f\xf2\x21\x2a\xf3\x7b\xbc\xf5\xe7\x5d\xf4\x2f\x40\xff\x39\x8b\xfe\x3d\x0a\xfd\xf7\xb9\xf8\xff\x7c\x2f\xec\x6f\xf7\xd6\xff\x61\x17\xff\x77\x63\xfe\x5a\xfd\xdf\xa9\xd0\xff\x1d\x1f\xe9\xe7\x39\x20\x82\x7b\x57\xfc\x3b\x3f\x9f\xbf\x1f\x76\x91\x8f\x0d\xb4\x26\xff\x03\x17\xf9\x91\xc1\xd6\xe4\x07\x5d\xe4\x27\x0e\xb6\x26\x1f\xf0\xab\xe5\x67\xe3\xad\xc9\x1f\x76\xd1\x3f\xf7\x60\x6b\xf2\x5d\x9a\x5a\x7e\x79\xa8\x35\xf9\xe7\x5c\xe4\x57\x1f\x52\xd7\xe7\xf9\xfb\x7e\x17\xf9\xab\x2e\xf2\x9c\xfe\x0a\xbe\x4f\xf2\x67\x0d\xf2\xb3\xbb\x4c\xbd\x03\x96\xf8\x33\x76\x88\xff\x17\x00\x00\xff\xff\x5f\x20\xb8\x72\xf0\x4e\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 20208, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

