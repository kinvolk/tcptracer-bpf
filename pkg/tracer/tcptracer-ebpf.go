// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x5c\x01\x6c\x1b\xd7\x79\x7e\x47\x8a\x16\x25\xd7\x93\xe6\x96\x09\x7d\xdd\x06\xa6\x4b\x1a\x4d\xad\x1d\x51\x96\x65\x55\x5d\x3a\xd6\x6d\x52\x4d\x33\x2a\x2d\xb3\x5a\xc1\x5d\x4a\xd1\x34\x2d\x31\x54\x24\x9a\xa4\x2c\x5d\x98\x6d\x29\xba\x64\x06\x91\x05\xb2\x93\x16\x42\x96\x66\xa2\xac\x24\xea\x96\x0e\x1a\xd0\xcd\x05\xba\x8d\x5a\x97\x61\xc2\x16\x0c\xc2\x1a\x0c\x1a\xea\x01\x42\x9b\x75\xda\x8a\x62\xda\xda\x79\x5a\x6a\x98\xc5\xbd\xff\x3b\xde\xdd\xbb\x77\x47\xca\x4e\x42\x20\x7d\xfa\xbf\x7b\xff\xfb\xdf\xfb\xdf\xff\xfe\xf7\xbd\x77\xe7\xfe\xce\x03\x27\x1f\xf4\x29\x0a\x33\x7e\x0a\xfb\x3f\x66\x4a\xe6\x6f\xeb\x84\xf9\x77\x0c\xff\xfb\x73\x4c\x61\x95\x3b\x08\x7b\x92\x31\xf6\x33\x8c\xb1\x62\xeb\x4e\x55\x97\xc3\x0a\x63\x67\x23\xf7\x4c\xea\x7f\x4f\xce\xb4\xb2\xa2\xba\x55\xc3\x23\xd9\xf4\x59\xfd\xef\x78\x61\x3c\x5d\x54\x37\x6b\xf8\xf4\xd4\x54\x4a\xff\x3b\x59\x88\x1c\x2e\xaa\x1b\x35\xbc\x90\xcc\xc6\xf5\xbf\x2f\xf4\xc4\x93\x45\x75\xbd\x86\x67\xb2\xb9\x69\xfd\xef\x33\xa9\x78\xbc\xa8\xae\x71\xbc\x52\xa6\xfe\x34\x2b\x8c\xad\x55\xab\xd5\xab\x3e\xc6\x3a\x74\xdc\x6f\xf6\x73\x1f\x63\x4c\x4b\x64\xb9\x5c\x54\x77\x49\x6f\x09\x7a\x3e\xc6\x76\xaa\xd5\x6a\xe5\x0a\x64\x3f\x63\xbb\xd5\x6a\x35\x2c\x38\xe5\x6a\x93\xd9\x9e\x4f\x97\x81\x7f\x09\xa5\x76\xe7\xb0\xe0\x97\x01\x6e\xe7\x2a\xda\x29\xaa\x31\x2e\xe7\xd5\xfe\x1a\x3e\xd3\xca\x58\x46\xed\x33\xc7\x3d\x4e\x7e\x8a\xdc\x33\x39\x59\x54\xbb\x4c\x3c\x72\x38\xa2\xff\x9d\x4d\x9f\x8d\x17\xd5\x8e\x1a\xde\x13\x4f\x72\x7f\x4c\x4d\xa5\x92\x45\x35\x52\xc3\x53\xf1\x78\x81\xfb\x35\x1b\xbf\x50\x54\xc3\xa6\xff\x72\x29\x8e\x67\x73\xd3\x67\x8a\x6a\xbb\xc3\x7f\xed\xf0\xdf\x87\x24\xfe\xb3\xfa\x6b\x40\xe2\x9f\x27\x79\x2c\x31\x16\x62\xfb\xf9\x13\x6d\x1f\xe1\x8d\xe8\xe9\xa6\xc6\x9b\x19\xd3\x07\x39\x8b\x72\xa4\xd9\xa7\x88\xfa\x31\x0f\xbb\x95\x66\x92\x43\xcd\x3f\xa1\xf9\x38\x0f\x59\xf9\x7f\x92\xcb\x98\x0f\x1f\xe6\xa3\x93\x71\x59\xcb\xa3\x9e\xff\xd3\xbc\x1f\x23\xfe\x1f\xf1\xf6\xb4\x5c\x90\xe3\x0f\x1f\xfc\x6f\x9a\xff\x16\xe8\x3d\xbf\x5d\xa5\x72\x0b\xe5\x26\xca\x0d\x94\xeb\x28\xd7\x50\x7e\x03\xe5\x2a\xca\x15\x94\x8b\x28\x17\x6a\xfd\xf2\xf1\x7e\x4d\x10\xae\x66\xa9\x7f\xe7\xdb\x11\x3f\x73\x24\xe7\xc2\xe8\xff\xee\x4d\x2a\x9f\x00\x1e\x01\xbe\x03\xfc\x22\xe1\xd9\x0e\xc2\x5b\xe7\x49\x9e\xe9\x22\xf9\x34\xd9\xd5\x0a\x7d\xe4\x9f\x39\x5a\xe5\xc5\x12\xfa\x37\x48\xfd\xd3\xe6\x06\xe8\x79\x6e\x18\xed\x63\x3c\xa5\x55\xdb\x38\x13\x39\x1e\x5a\x2c\xd9\x79\x0d\xfd\x99\x83\x4c\x7e\xaa\xfc\x12\xf9\x6f\xb6\x85\xe6\x37\xf3\xfc\x9b\x1c\x9f\xf5\x31\xa6\xf7\x28\xd3\xf9\x7d\xb4\x93\x85\x1e\xf9\x35\x9d\x7b\x82\xcb\x99\xce\x6d\x3c\xe7\x4b\x84\x8d\xfb\xa8\x9d\x84\x36\xc6\xe5\xa1\xcb\xd4\x7e\x42\x9b\xa0\x32\x3f\x49\xf5\xfc\x54\x6f\xe8\x59\xcc\x5f\x3f\xe6\xa9\x93\xe6\x29\xa5\x24\xb8\xdf\x43\xca\xe3\x88\x97\xcb\x14\xc7\x8a\xc2\xf1\x00\xfb\x53\x9a\x7f\xc4\x5d\x46\x7d\x88\xeb\xb5\x3d\x45\xb2\x75\xfd\x3c\x84\xf5\xa3\xeb\x55\x92\x66\x7c\xea\xa9\x23\x5d\x26\xbd\x8c\x4a\xe3\x08\xb0\x17\x31\xce\xd1\x2a\x95\x37\xe8\x79\xe7\x29\x94\xd7\xd1\xcf\x09\x3c\xdf\x45\x3c\xd0\xfc\x1b\xed\xb7\xbd\xd7\xd9\x8f\x51\xf4\xa3\xc9\x62\x5f\x3b\x1f\xa9\xab\x77\x43\xaa\xd7\x51\x57\xef\x94\x65\xdc\xa6\x5e\x57\x5d\xbd\xeb\x52\x3d\x8a\xc7\xb6\x3b\x9c\xf5\x27\x50\x3f\x28\xf1\xaf\x76\x9e\xe2\x57\xbb\x42\xfe\x92\xd9\xdb\x95\x8c\x2f\xb1\x0c\xff\x0f\x52\x3e\x48\x5c\xa1\x79\x48\xf6\x37\x51\xfc\x2d\x19\xf3\x11\x24\xb9\x7c\x1d\xf3\xd8\x4a\xf5\x5f\xa2\x79\x49\x9e\x7e\x0f\x2f\x43\x4d\x19\x5b\xdc\xcd\xa2\x0c\xf9\x29\x2e\x3f\xeb\x63\xac\x5a\x65\x2c\xe4\x3b\x47\xb2\x02\x59\xa1\xb8\x36\xf2\x54\x51\x9d\x10\xf6\x8f\x39\x5b\x5e\xb0\x8e\x2b\x8b\x71\xb5\x63\x5c\xed\x42\xde\x64\xc2\xfe\x36\x21\xc9\xa3\x01\xf6\x10\x2f\x43\xca\xbd\x3c\x0f\x86\x94\xfb\xb9\x7f\xf4\x75\x10\xe0\xcf\x69\xfd\x1b\xfd\x49\xaa\xa7\xd0\x1f\xf2\x5f\xdb\x83\xee\x71\xe8\x3d\x5f\xa3\xae\xf3\x75\x4a\x32\x5f\xe3\x0c\x7e\x45\xa9\x8f\xe3\x7f\xaa\xd5\xaa\x31\x8e\x87\xdb\xa3\xb5\x7e\x2a\xbc\x7f\x6b\x58\x6f\x5d\x42\xff\x69\x9e\xb5\x32\xe5\x51\x59\xbc\x59\xd7\x83\xd8\xff\x44\x19\x71\xa2\x5e\x43\xfb\x77\xdb\xda\xcf\xa8\x14\x27\x6d\xfb\x9c\xed\x5e\xf7\xcc\x13\x46\x7c\xbd\x89\x76\x0f\x09\xfd\x46\x1e\x28\xef\xb8\xf6\x7b\xd7\xb3\xdf\x88\x57\xf0\xb3\x00\x3b\x20\xf4\xfb\x1c\xf5\xfb\x33\xce\x76\xcf\x79\xf6\xfb\x1c\xfa\xfd\x7d\xb4\x4b\x1b\x6d\xa2\x7c\x0a\xf6\x36\x1d\xbc\xab\x91\xb8\xac\xc7\xbb\xdc\xf8\xe8\x3b\xce\xf7\xc2\x22\xdf\x1b\x16\xd6\xeb\x80\xc3\xee\xb0\x17\x7f\x41\x9c\x84\xf6\xdd\x60\x8d\xea\xe9\xeb\x54\x3b\xc7\x1c\xf5\xbd\xf8\x99\xc9\x93\xfe\x8b\xc6\x51\xe3\x49\x3f\x24\x79\x49\x1c\x47\xa4\x6a\xaf\xf7\x10\xf1\x24\xe5\xdf\x89\x27\x9d\x07\x4f\xba\xeb\xdf\x98\x5d\x0f\xbc\x08\xbc\xde\xe0\xf1\xc6\x7a\x2c\xaa\xe0\x11\x2a\x78\x84\x0a\xde\xa1\x82\x17\xa9\x0b\x28\xe7\x51\x12\x9f\xb9\xea\x07\x4f\xea\x1f\xc5\xfe\x38\x06\xbe\x41\x3c\x49\xcb\x83\x1f\xf5\x67\x6d\xfb\xa7\x96\xa7\xfd\x4f\x2b\x80\x0f\x0d\x12\x6f\x2a\xf6\x83\x57\xe5\xbb\xf0\xbc\x0f\xcf\x61\xb7\x1f\x3c\x2a\x8f\x7c\x55\x18\xc0\x73\xf4\xb3\x1f\x3c\x2a\x0f\x7e\xd4\xbf\x62\x1b\x57\xa2\x00\x5e\x34\xf8\x3a\xf8\x16\x78\xd1\x20\xf9\xa5\xf2\x00\xf9\x6b\x36\x00\x5e\x74\xfa\x0d\xe2\x45\x4d\xe0\x45\x83\xff\x8c\x76\xc0\x8b\x06\xc9\x8f\xe9\x02\x78\xd1\xe0\x26\x9e\x83\xef\x34\x81\x17\xcd\xd0\x7e\x33\x74\x0a\xf3\x31\x08\x9e\x56\x20\xbe\x94\x98\x01\x8f\x82\xdd\x21\xf4\xa3\x78\xda\x98\x97\x3e\x94\x74\x0e\x19\xf1\x7d\x95\xce\x01\xaf\x20\xce\x9a\x19\xfb\x46\xb5\x5a\x6d\xeb\x45\xfc\x59\xf2\x44\x97\x65\x3f\x72\xe4\xfd\x32\xda\xbd\x93\xe2\x46\x2b\x77\x41\x46\x3b\x96\x38\x8e\x08\xeb\x74\x54\xba\x6f\x3d\x47\xe3\x08\x62\x5f\x40\x39\x12\x7c\x56\x88\x47\xd8\x41\x3c\x17\xd5\x1d\x94\xdb\xc8\x5b\x6f\xa1\xdc\x05\xbe\x85\xbc\x85\x7d\xe2\x3c\xcd\xaf\xc8\x67\xf4\x7e\xb5\xbb\x8c\x3f\x68\xdb\xef\xdc\xf5\xc3\x82\x7e\x64\x0f\xfa\x56\xbd\x9d\x3d\xda\x0d\x0a\xfa\xdb\x52\xfd\xfa\xfc\xef\xad\x5b\xe4\x7f\xbb\x7b\xe4\x7f\x5b\x0d\xf1\x89\x2d\x57\x3e\x21\xe5\xb7\x5f\x45\x5c\x3c\x4f\xf9\x44\x7b\x19\xf1\xf1\x08\xe5\x95\x4a\x82\xf4\x87\x2e\x51\xa9\xbd\x82\xb8\x79\x0c\x79\x65\x05\xe7\xc1\x12\xe5\x9b\xf4\x32\xe2\x68\x70\x0e\xfc\x71\x17\xfc\xf1\x31\x81\x5f\x3e\x4e\x7c\x51\xf9\x18\xf5\xf3\x0b\xb0\x53\xcb\xb3\x1f\x25\xfc\xe3\x24\x9b\x3c\x91\xfc\x53\xb9\x4b\xc4\x8f\x71\xb9\x38\x18\x44\x5e\x6a\x47\xfe\x0b\x0b\xf9\x3c\x66\x5b\xdf\x5a\x79\xd8\xb6\xce\xad\xfe\xea\x93\xf0\xca\x91\x16\xda\xa8\x0c\xbf\x8c\x2b\x58\x77\x28\xc3\x7c\xdb\x37\xf9\xd8\xcf\xdf\x45\x1b\xce\x48\xf3\x21\xdb\x38\xeb\xe9\x3d\x7c\x17\x4d\xe0\xec\x3e\x7a\x9e\x7c\x84\xe6\xc5\x58\xdf\xc9\xd2\xdd\xe8\x3f\x8d\xf7\x9a\x42\xfd\xcb\xe0\x7e\x44\x2b\x87\x05\xbc\x13\x78\x3b\xd6\xf5\x87\x1d\xfb\xb3\x98\x6f\xba\xa4\xf9\x06\xe3\xb7\xe8\x8d\x36\xa0\xb7\x17\x1e\x13\xe4\x7c\x22\x26\xcc\x1b\xe5\x79\x6d\x9c\xf2\xba\x36\x91\x75\xf4\x63\xd3\x6b\xdf\xc7\xfd\x45\xa8\xe5\x25\xd2\x47\x3c\x8f\x28\x57\xf8\x7e\x5e\x39\x2f\x9f\x17\x9d\xff\x37\xf3\x7a\x2f\xf2\x76\x44\x7e\x93\xc1\x3e\xd7\xf8\xfd\x10\xf1\x42\x0d\xcf\x43\x4a\x2b\xb7\x7f\xfb\xed\x96\x30\x3f\xbf\x87\xf6\x69\x9f\xae\x7c\x91\xea\xc9\xf2\xc1\xaa\x24\xff\xa4\xcb\x64\x77\x44\xf9\x61\xd5\x67\xe3\xdd\xab\x88\x9b\x1d\xf4\x6f\x0b\xe5\x8d\xaa\xb5\xdf\x49\xec\x27\xda\xa5\x70\xc3\xf6\x6d\xf9\xe8\x52\xa4\xae\xde\x8e\x54\xaf\xa3\xae\xde\x96\x2c\xdf\x5e\xea\xaa\xab\x77\x43\xaa\x87\x3c\x1d\x76\xd6\x1f\xb0\xe6\xe9\x2f\x9a\xf3\x44\x7a\x46\x9e\x1e\x70\xcd\xd3\xdb\xd2\x73\x3a\xfc\x3f\xb8\x80\x3c\xba\x83\x3c\xfa\x02\xf2\x2c\xe6\xa3\x73\x11\xe7\x74\xdc\xa7\xa8\x4b\x38\xa7\x6f\xe3\x9c\xbe\x8c\x73\xfa\x27\xb9\x3d\xe7\x39\x9d\x12\xae\x79\x4e\xff\x15\x92\x6b\x79\xf6\x7e\xd2\x73\xdc\x57\xd2\x3a\x09\x30\x3a\x7f\x5a\xe3\x76\xc1\x33\x6e\x8f\x72\xd9\x8c\x7f\x39\x3f\x96\xc5\x4d\x58\xb8\xa7\x35\xfc\x15\xb0\xdc\x3f\x6b\x57\x28\x8f\x88\xe3\x2c\xf6\x9b\x3c\x5f\xe1\x71\x4b\xfb\x5f\xa2\xfc\x75\xc4\xf1\x6f\x42\x5e\x80\x9c\x85\xfc\x02\xe4\x02\x64\xf2\x77\xe5\x20\xf5\xe3\x1a\xf6\x8b\x4c\x27\xed\x7f\xb3\xc8\xbf\x66\x1e\xc6\x3e\x58\x5e\x46\x3b\x8f\x23\x2f\x1b\xe3\xc6\xbe\x5a\x36\xc6\x8f\x7d\x78\x19\xe3\x6f\xa2\xf8\x32\xf6\x9f\xb0\xcf\xee\xd7\xab\x01\xc6\xfa\xe0\x87\x43\x0d\xce\x83\xdf\x72\x5e\x35\xf3\x92\x8f\xf2\x12\xea\xd5\xce\x7d\xb7\x9d\x57\xfe\xb7\xda\x2a\xc9\x77\xe6\x79\x67\x8f\xbc\xf4\xd2\xb0\xb4\x3f\x32\x5e\x3a\x20\xe3\x77\x1e\xfa\x22\x2f\x5d\xd8\x83\x7e\x5d\x5e\xea\x61\xb7\x21\x5e\xda\x40\xbe\x93\xf2\xd2\x06\xf2\x9d\x94\x97\x7a\xe4\xbb\xad\x86\xf2\xdd\x1e\x79\x69\xed\x1e\x90\xe2\x46\x7b\x09\xf1\x81\xf3\xd9\x50\x08\xf1\x88\x3c\x58\xec\xa7\xf5\xa3\x2d\x83\x8f\x1a\xe7\xc4\x25\xc4\x4f\xe7\x06\xf2\x22\xf8\xa8\xfa\x4f\xb4\x0e\x17\xc1\x47\x5b\xe9\xdc\x19\x0a\x94\xa9\xfd\x1e\x6a\x3f\xd4\xf4\x87\x5c\x36\xf3\xe1\x57\x48\xae\xe5\xc3\x3f\xa0\xfc\xe2\xc8\x87\xfb\x78\x3e\xb4\xae\xbf\x55\xcf\xf5\x77\xd9\xb1\xdf\xbb\xd5\xa7\xbc\xf9\xb4\xc0\x8f\xe4\xf7\x07\xb2\xf8\x7d\x67\xf2\xe6\x0b\xb6\xbc\xa9\x61\xbd\x6b\x4b\xc8\x63\x9d\xf6\xfb\x5b\x23\xdf\x69\x4b\xb8\x17\xc1\xfb\x9a\xa2\x8a\xf7\x39\xe5\x0d\x97\xbc\x4a\xf7\x12\x22\x5f\xae\xbc\x8f\xca\x38\x5d\x43\xf2\xfb\x03\x9e\x77\x51\x66\x06\x2f\xd7\xf2\x31\xe7\xcf\xea\x73\xb0\xb3\x22\xe4\xdd\xc5\x5b\xce\xbb\xc3\x96\xbc\x1b\x60\x78\x3f\x0b\x5e\x2b\xf2\x58\xf3\xde\xac\xaf\x26\xf3\xf5\x13\x44\x5c\xa7\xf7\xc8\x6f\x6b\xf7\x5a\x1f\x26\x7d\xf0\xd9\x11\xa5\x93\xc7\x57\xf1\x11\x9c\x6f\xf0\xde\xe6\x2a\xec\x14\x4b\xe4\xff\x64\x89\xe2\xdf\x38\x7f\x56\xf0\xbe\x48\xb6\x5e\xd7\xa5\xe7\x64\x63\x9d\xaf\xbb\xae\xf3\x37\x24\xeb\xbc\x58\xa2\x38\xcb\x94\x16\x1d\xf1\xef\xf5\xbe\xd3\xc9\xa3\xdb\x88\xc7\x4f\xc0\x7f\x2f\x77\x49\xcf\x7d\x19\xf5\x76\xed\xfc\x86\xf7\xbe\xe8\xe1\xb7\x45\xe9\xbe\x88\xfe\x08\xfd\x1e\x51\xb6\x05\xfe\x3d\x5f\x87\x7f\xc7\xec\xfc\xdb\x78\x4f\xe6\xd1\x9f\x79\xaf\xf7\x64\x1e\x7a\x52\xfe\x6d\xdc\x93\x78\xe8\x49\xf9\xb7\x71\x4f\xe2\xa1\x27\xe5\xdf\xc6\x3d\xc9\x21\x67\xfd\x98\x75\x3f\x7a\xd6\x9c\x4f\x7b\x9c\xc6\xf6\xc8\xbf\xe1\x7f\xdc\x7b\x9a\xfc\x7b\x59\xe0\xdf\x2b\x02\xff\xfe\x23\x81\x7f\xbf\x0a\xfe\x4d\x0b\xd6\xc9\xbf\xe9\xa0\x6c\xee\x37\x14\x7f\xc6\x7e\x33\xa2\xfc\x23\xf5\xd7\x12\xbf\x7a\x5c\x05\xd8\x5f\xbf\x2d\x71\x38\xa2\x2c\x0b\xfc\xcc\xb8\x2f\x99\xbf\x35\x7e\x66\xdc\xbf\x09\xfd\x91\xf1\xb3\x98\xd7\xfd\x9d\x44\x5f\xe4\x67\xf3\x7b\xd0\x6f\xf8\xde\x50\x62\x77\x4f\xf7\x86\x1e\x76\x3d\xef\x0d\x3d\xf4\x3c\xef\x0d\x25\xeb\x61\xab\xa1\xf5\xb0\x47\x7e\xb6\x8c\xb8\x30\xbe\x93\xb8\x62\xbc\x2f\x58\xc1\xbe\x8e\x38\xe9\x04\x0f\x28\x6f\xdb\xce\x75\xe9\x45\xc4\x4d\x2b\xed\x93\x69\xbc\x47\xce\x9c\xfe\x16\xad\x97\x57\xc0\xcb\x1e\x7b\x8d\xf2\xe3\x71\xea\xcf\xd0\xa7\xa8\x0c\x35\x8f\x53\x3f\x71\x6f\x3e\x74\xaf\x81\xd3\xbd\xfe\x67\xc1\x0e\x42\xec\x0c\xc9\x01\xc8\x01\xba\xff\x1f\x69\x0a\xf0\x52\x5c\x7f\x61\xbe\xfc\x2c\xf7\x77\x9f\xa0\xfb\xae\x11\x1f\x6d\x9c\xf5\xef\xed\xbe\x50\xf3\x6f\xc0\x72\x8f\x25\xde\xcf\x17\x4b\xe6\xf7\x51\x7e\xbe\x5e\x86\xe1\xa7\x3e\x81\xa7\x9c\x12\xf6\xb1\x31\xf8\xd1\xe0\x5d\xaf\x62\xbd\x4d\x40\xfe\x0b\xc8\x93\x36\x9e\xe5\xe4\x51\xc4\xc3\xc2\xcd\xf6\xfe\x1b\xf5\xe2\x39\x2a\x67\x51\xdf\xd4\xcb\x09\xfd\x2b\x38\x78\xe6\xa8\xe4\xde\x54\x2b\xe3\xfc\xbc\x04\xfe\x87\xef\x14\x2a\xe0\xd9\xb3\x78\x6f\x53\xa1\xf0\x77\xbc\xe7\xae\x80\xef\x87\x18\xf6\x35\x43\x6e\x22\x82\x55\xa1\xd7\x5f\xb5\x79\x37\xeb\x1f\xb4\x3d\x8f\x67\x99\x5d\x9f\xb3\x30\x3b\xcf\x8b\x79\xf0\x3c\xe3\x7c\x23\x9e\xb3\x8d\xf1\xb9\x8e\xeb\xa0\xdd\x6e\xb2\xdf\xd8\x4f\x88\x87\x5e\x0b\xc0\xbf\xf8\x2e\xc9\xdd\xff\xcf\x0b\xfe\x7f\xc1\xc1\x67\xe6\x3d\xcf\x19\xdb\x37\xc5\xfa\x8b\x9e\xf5\xbf\x7b\x93\xbd\xab\xf1\xbc\x28\xc4\xf3\xb2\x2d\x9e\x13\xe0\xeb\x6e\xf1\xec\xbc\x6f\xc9\x09\xeb\xa4\xb1\x78\xbd\xdd\x78\x08\xb0\x6f\xbe\xab\x7e\x33\xce\x2d\xda\x12\xce\x33\xf0\x87\x79\xae\x11\xcf\x63\x78\xff\x6b\x7c\x57\xe7\x9a\x27\x2e\xca\xcf\x5b\xd8\x27\xe2\xbf\x88\x38\xc5\x7e\x7e\x0d\x65\xa6\xbf\x24\xf4\xff\xe9\x77\xcc\xef\xc3\xdc\xc7\x74\x5e\x34\xbf\x6f\xdc\xb5\xfb\xe7\x90\xfd\x7b\x05\xe3\x7b\x03\xf1\xdc\x15\x6a\xa1\xfb\x4f\xeb\xfa\x90\x7d\x1f\xe1\x3c\x77\xf5\xf3\xd2\x3c\x77\xf5\xd1\xb9\xab\x84\xf3\x32\xda\xcf\x94\xf0\x7d\x4b\xe9\xc7\xe0\x47\xf5\xf7\xfb\x1f\xef\x81\x27\x34\xe3\xfb\x80\x7a\xdf\x99\x15\x4b\xe0\xa3\xa5\x9d\x86\xcf\x7d\x72\x9e\x63\xf0\x87\x6d\x57\xfe\x20\x3b\x2f\x14\x4b\x0b\xf0\xc3\x98\x23\x7f\x79\xdf\x17\x8b\xe7\xb1\x03\xc2\xfb\x13\xb4\xab\xde\x6e\xbb\xbf\x76\xcb\xe7\xbc\x31\x7d\xbc\x41\xbc\xe7\x72\xf0\xec\x31\xf0\xec\xff\xa8\xfa\x6c\xf9\x01\xdf\x51\xe0\x7d\xa4\xc8\x33\x8a\xaa\xf1\x9e\x12\xf9\x11\xdf\xa9\x9a\xe7\x43\xef\xef\x4b\x12\x65\x9c\x57\x54\xfa\x0e\xc3\x7c\xaf\xf8\x6a\xc3\xe7\xc5\x35\x8f\xf3\xa2\x8c\x77\xbe\x66\xfd\x0e\x4b\xe0\x9d\xe6\x77\x5e\xb8\xa7\x2b\xd3\x7a\x30\xf3\xf6\xdf\x3b\xf2\xc5\xaa\x94\x57\xd8\xf3\x96\xf1\x5d\xec\x2c\xca\x90\xef\xef\x2c\xf9\x8b\x7e\xba\xcb\x0e\x1f\x7c\x0d\x7e\x59\xb7\xe9\x9b\xe7\xae\x35\xe9\x3c\x50\x7e\x51\xd8\xe1\x83\xc4\xb3\xac\xf9\x4a\x8f\x2f\xad\x3c\xea\xb0\xc7\xfd\x7b\x85\xe6\x2f\xc0\x9e\x7a\x9b\xe3\xe8\x8f\xf9\x79\xed\xed\x8b\x23\x7c\xd7\xbd\xc7\xef\x97\xcc\xf8\x7a\xd3\x25\xbe\xea\x9f\xc3\x36\x6e\xf3\x1c\xb6\xb9\x47\x7d\xf1\xfc\xb9\xe6\xa1\x6f\xc4\x77\x73\x8b\xf3\xdc\xb9\xee\x71\xbe\x32\xe3\x7c\xcb\x25\xce\xbf\xdb\x60\x9c\xaf\x63\xff\x26\xff\x8f\xf8\xf0\x1e\x1e\xe3\xa9\x7f\x8e\x69\x41\x1c\xe2\x3d\xfa\x32\xcd\xeb\x48\x13\x1d\xac\x2a\xc7\xd0\x0e\xbe\x87\x32\xbe\xc7\xa2\xac\x60\x39\xdf\x04\xa2\xb5\xf1\x51\xbc\xe1\xfb\xb3\x57\x10\x57\x8f\x99\xdf\xed\xfa\x2c\xef\xcd\x92\x8f\x14\x04\xfe\x62\xe7\x1f\x89\xf2\xeb\x88\x9f\x8b\x90\xaf\x41\x7e\x1a\xb2\x71\xdf\x35\x6f\xe3\x79\x19\xf5\xb2\x10\x7f\xcf\x39\xfc\x39\x27\xf5\xe7\xc5\x3a\x79\x23\xe6\x92\x37\xee\x87\xbd\x79\x97\xbc\xf1\x91\x3a\x79\xe3\x98\x23\x6f\x8c\x79\xe4\x8d\x0a\xfe\x7d\x86\x93\x5f\xd2\xf7\x1b\x43\xf8\x0e\x26\xa4\xd0\xf7\x1d\x43\x9f\x80\xec\xef\xb0\xf9\xcd\xd9\xcf\xbb\xeb\xf4\x33\x72\x4b\xf9\xcd\xe4\x63\xff\xc9\xe5\x26\xcb\x7f\x0c\xdf\x80\xc8\x30\x05\x3c\x2c\xd8\x00\xd6\x6e\xc4\xa5\x05\xeb\x90\x60\xba\xde\x45\xfc\x6d\xfc\x32\xd9\xdc\xf4\x99\x54\x3c\x5e\x48\x66\xe3\x17\x7a\xe2\xc9\xe9\xa9\xa9\x54\xb2\x10\x39\x1c\xc9\xa6\xcf\xc6\x0b\xe3\xe9\xb3\x91\x7b\x26\x27\x67\x5a\xcd\xfa\xb9\x54\xa1\x41\x95\x4f\x0d\x9f\x64\xec\xa6\xe5\x5b\x6c\xd9\xef\x65\xfe\xde\x25\xc0\xd6\xf7\xd9\xf1\x4f\x03\x5f\x69\xb6\xe3\xdf\xf3\x11\x3e\x16\xb4\xe3\x5f\x02\xbe\xe5\xb7\xe3\x2a\xf0\xa0\x50\xff\x47\x0a\xe1\x6b\x02\xfe\x97\xc0\xb7\x85\xfe\x7c\x19\xfd\x09\xb7\xd8\xf1\x0b\xc0\x3b\x04\xfc\xf3\xc0\xfb\x9a\xec\xf8\xb7\xd1\xfe\xa8\x50\xff\x25\xe0\x13\x02\xfe\x1d\xde\xff\x16\xd6\x25\xf8\xe1\x20\xf0\x09\x01\xff\x81\x42\x38\x13\xc6\xf5\x67\xc0\xbb\x04\xfc\xcf\xfd\x84\xc7\x04\xfc\x75\xd4\x9f\x17\xfc\xf9\x20\x97\xf7\xb3\x0d\x01\xff\x7d\x1f\xe1\xa3\x01\x3b\xde\x0a\xfc\xa2\x80\x7f\x4f\x21\x7c\x41\xc0\xbf\x06\x7c\x45\xc0\xff\x06\xed\x6c\x0a\xfd\xfc\x2d\xe0\x41\xc1\x6f\xf7\xa1\x9f\x2b\x76\x98\x9d\x43\x7d\xf1\x1f\x39\xfe\x04\x76\x87\x05\xfc\x45\xde\xce\x01\x36\x2a\xcc\xe3\x6f\x03\x9f\x6b\x15\xda\x07\xbe\x2e\xe0\xdf\xf6\x11\xbe\x29\xf2\x6d\xe0\x59\xa1\xfd\x67\xd0\xce\x82\xd0\xce\xc7\x8c\xf6\x85\x79\x9f\x41\x3b\xbb\x02\xfe\x14\xea\x87\x85\x76\xa6\x80\xb3\xf7\xd8\xf1\xcf\x00\xdf\xd9\x6f\xc7\x7b\xfd\xf2\xfe\x77\x00\xcf\x0a\xf8\xd7\xd1\x9f\x27\x04\x3c\x0e\x7c\x5b\xc0\xff\x81\xe3\x6d\x6c\x45\xf0\xc3\x77\x14\xc2\x23\xc2\xb8\xfe\xc4\x4f\xb8\x18\xff\xdf\x44\x3b\x62\x9c\x3c\x0a\x7c\x4b\xc0\x7d\xc0\x77\x04\xfc\x6b\xc0\x77\x85\x7e\xfe\x2d\xfa\x33\x2c\xe4\xfb\x17\x81\x8f\x09\xf8\x93\x7c\x5f\x3e\xc4\xc4\xdf\x07\x39\xae\x3a\xf0\x26\xce\xc3\xde\xeb\xc0\x3f\xca\xf7\xeb\xf7\x39\xf0\xcf\xf3\x76\x0e\x38\xf0\xfb\x38\xbe\xdf\x81\x7f\x8b\xef\x17\x7e\x07\x7e\x9a\xe3\xcd\x0e\xbc\x99\xe3\x6d\x0e\x7c\x85\xe3\x01\x07\x1e\xe3\x78\x8b\x03\xdf\xe1\xfd\xff\x59\x07\x7e\x2f\xc7\x0f\x3a\xf0\x10\xef\xff\x9d\x0e\x5c\xe5\xfe\x09\x39\xf0\x5f\xe7\xed\xdc\xe1\xc0\xb7\x51\xea\xd3\xa3\x33\xbb\x1d\x41\xee\x50\xec\xf2\x84\x45\x3e\xc1\x18\x5b\xdd\x67\xca\x3a\x95\x18\x68\xb1\x3f\x1f\xb0\xb4\xd7\x87\xff\xac\x72\x56\x90\x17\x99\x5d\x7f\xce\x6f\x97\xb7\x9b\xed\xf6\x22\x41\x53\xfe\xa4\x60\x4f\xaf\xbf\x21\xc8\x1d\x42\xff\xb7\xfc\xf6\xf6\xfa\x02\xa6\xac\xcf\xd5\x44\xc0\xfe\x7c\x5b\xb0\x17\x6e\xb1\xcb\xab\xad\xa6\xfc\x71\xc6\xf0\xaf\xc0\x4c\x7b\x31\xc1\xfe\x8a\x20\xaf\xb5\xd8\xed\xcf\xb5\xda\xed\xaf\xb4\xda\xed\x6d\xec\xb7\xd7\x1f\x38\x60\xb7\x3f\x2a\xd8\x5f\x17\xec\x45\x7c\x76\xf9\x62\x93\xbd\xbd\xb5\xa0\xe0\x8f\x16\x7b\xfb\xec\x48\x21\x35\x57\xb0\xd2\x9e\xf4\x54\xaa\x10\x4f\xe6\x33\xf1\x44\x32\x99\xca\x16\xd8\x91\x5c\x6a\xb2\xf6\xf8\x3e\xf1\xa9\xc8\x97\x7a\x0d\xbe\x64\x67\x5e\x26\x6c\x6f\x4e\xf6\x50\xfa\xc4\x95\x97\xb9\x30\x3c\x99\x9d\x1e\x57\x3b\xe6\x93\x47\x13\xd9\xbc\x8e\x15\x72\x89\x64\x2a\x17\xcf\x17\x12\x85\x99\x3c\x8b\x5f\x48\xe5\xf2\xe9\xe9\x29\x9b\xb1\x7c\xaa\xc0\x9f\xa7\xc4\xe6\xcc\x07\xd6\xea\xc9\xc9\xe9\xbc\xa3\x2a\x81\xf1\xc9\x74\x32\x35\xa5\x3f\xcd\x17\x72\x85\xc4\x19\x76\x24\xaf\x3d\xaa\x97\x27\x4f\x9c\xe8\x8d\x7f\x44\x2f\xa2\xf1\x6e\x5e\xf6\xc4\xa3\xbc\x3c\x8a\x32\x8a\xb2\x37\xde\x47\x70\x1f\x6a\xf7\x11\x1a\xed\x83\x16\x1e\x47\xf1\xdc\xc0\x8f\x53\xb5\xee\xe3\xa8\x76\x1c\xd5\x8e\xa3\xda\xf1\x9a\x47\xe2\xa9\x0b\xa9\xa9\x42\x3c\x9d\xbd\xd0\x4b\x18\x5c\x96\x9f\x4e\x66\x2c\x68\x61\x26\x3b\x99\xd2\x99\x32\x87\x4e\x9e\x38\x71\x2c\xde\x4b\x6d\xf7\xc2\x14\xd0\x6e\xc0\x86\x1c\x85\x4c\x65\x54\x2f\x8f\xe4\xa6\xcf\x26\x0a\x09\xdd\x2b\xd1\x23\x51\xe8\x1f\xa3\xea\xc7\xd0\xda\x31\xb4\x02\x39\x8a\xc7\x54\x1e\x45\x19\xd5\x4b\xe7\x40\x7a\xa4\x03\xe9\x71\x0e\xa4\x87\x1a\xed\x21\x5b\x90\x8e\xa2\xec\x06\x1c\xed\x81\x29\xe3\xf9\x51\x4c\xc5\x51\x74\x09\xe5\xd1\x6e\xe0\xdd\xc0\x51\x1e\x8d\xa2\xbd\x28\x9e\x43\x8e\x42\xa6\xb2\x37\xde\xdd\x45\x43\xeb\xee\x62\xb7\xff\x7b\x06\xef\x21\xc4\x5f\x84\x3e\x03\x66\x7f\x25\x3c\x14\xe8\x02\x97\x15\xfc\x7f\x26\x58\x7f\x31\x17\x7b\x02\xfd\x61\x6f\xd5\xd1\x17\xef\x6f\x05\x1a\xc3\xae\xd3\x69\xc0\xf1\xdb\xfa\x65\x2a\xf1\x1a\x90\xbd\x1f\xef\xb7\x0c\x7d\x03\xff\x57\x17\xfb\xa3\xb0\x3b\xd7\xe2\x6d\xff\x5f\x5c\xec\xef\xc0\xfe\xb0\xc5\x7e\x40\x62\xff\xb2\x8b\xfd\x0d\xec\x13\x73\xcc\xdb\xfe\x33\x2e\xf6\x63\xf7\xdb\xed\xbc\x1f\x5c\x47\xb4\x3f\xe3\x62\x7f\x00\xfb\xd2\x70\xd0\xdb\xfe\x79\x17\xfb\xc3\xb0\x3f\x66\xb1\xdf\x22\xb1\xff\xab\x8a\xdc\xfe\x02\x28\xe2\x66\xab\xb7\xfd\x07\x14\xb9\xfd\x55\xd8\x9f\xb7\xd8\xdf\x2f\xb1\x5f\x70\xb1\x9f\xfd\x05\x94\x07\xbc\xed\x67\x5d\xec\xc7\xe8\x9f\x39\xb1\x27\x2c\xf6\x0f\x48\xec\x7f\xd0\xc5\xff\x5b\x1f\x42\xff\xeb\xc4\xdf\x07\x5c\xfc\xbf\x06\xfb\x56\xff\xb7\x49\xec\xff\xc0\x47\xf6\xc5\x1c\x90\xc5\xfd\xa0\xc8\xc8\xc5\xf5\xfb\x01\x17\xfd\xdf\x6d\x50\xbf\xea\xa2\xbf\xd0\xa0\x7e\xaf\x8b\xfe\xab\x0d\xea\x87\xfc\x72\xfd\xb5\x06\xf5\x4f\xba\xd8\x7f\xa3\x41\xfd\x76\x45\xae\xbf\xdd\xa0\xfe\x57\x60\xbf\x5b\xc0\x19\xfe\x9d\xea\xe7\x44\x7b\x28\x8d\xb4\xfa\x94\x8b\xfd\xcf\xf5\xca\xed\x89\xf9\xff\x5e\x17\xfd\x31\x17\x7d\x51\xfe\x32\xee\x8d\xc5\xdf\x04\xf4\xe7\x2c\xe7\x93\x63\x96\xf8\xc5\x67\xe9\xec\xa7\x01\x00\x00\xff\xff\x3f\xf6\xc5\x7c\xe0\x49\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 18912, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

